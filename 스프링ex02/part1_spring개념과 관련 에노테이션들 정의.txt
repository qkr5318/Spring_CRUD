스프링이란

1. 스프링은 엔터프라이즈용 Java 애플리케이션 개발을 편하게 할 수 있게 해주는 오픈소스 경량급 애플리케이션 프레임워크다.
2. 스프링은 POJO 프로그래밍을 지향하는 특징을 가지며, 그를 위해 IoC/DI, AOP, PSA를 지원한다.
3. IoC는 객체 간의 의존 관계를 개발자가 아닌 스프링이 맺어주는 것을 의미한다.
4. DI는 의존 객체를 특정 클래스에서 직접 생성하는 것이 아니라, 외부로부터 주입해주는 것을 의미한다.
5. AOP는 애플리케이션 전반에 걸쳐 공통적으로 적용되는 코드들을 비즈니스 로직으로부터 분리해내는 것을 의미한다.
6. PSA는 특정 기술과 관련된 서비스들을 추상화하여 일관된 방식으로 사용할 수 있도록 한 것을 의미한다.
7. 스프링 부트는 스프링 애플리케이션을 만들 때에 필요한 초기 설정을 간편하게 해주는 프레임워크다.
   Spring Initializr를 사용하면 스프링 프로젝트를 편리하게 생성할 수 있다.

스프링 개발 환경 구축

설정
- 스프링의 개발 환경 
1. 개발 환경 설치 및 설정
	1) jdk 설치후 환경 변수에서 경로 설정 (JAVA_HOME, PATH)  --> java -version 자바가 제대로 동작하는지 확인
	2) 이클립스나 STS 설치 
	자바버전과 이클립스 버전 확인 이클립스 버전이 어떤 자바version과 호환이 되는지 확인후 설치
	이클립스는 플러그인 설치 STS3 ※ STS4는 스프링부트에 특화되어 있어 STS3를 설치해야한다.
	설치된 후 이클립스/sts .ini파일 일부 수정 
	-vmarg위에 -vm 정의
	ex) -vm (자바 실행파일 경로 지정)
	    C:\폴더명\폴더명\bin\javaw.exe
	수정후 바로가기 아이콘 (그 전에 바로가기에 있다면 삭제후 다시 바로가기 교체)
	3) workspace UTF-8 인코딩 설정
		css/html/jsp파일 UTF-8로 변경
	4) 서버 설정 
		※ TOMCAT을 사용할 때에는 항상 http://tomcat.apache.org/whichversion.html 문서를 통해서 자신의 환경에 맞는 버전을 사용
	   window > preferences 메뉴의 Server항목을 통해서 추가 add 버튼 통해서 Apache Tomcat 9 를 선택하고, Tomcat이 설치된 경로를 지정해 준다.

2. 스프링 프로젝트 생성
	1) 프로젝트 생성하는 방식 총 3가지
		1) 스프링 프로젝트를 지정하고 생성하는 방식
		2) Maven이나 Gradle 프로젝트를 생성한 후 프레임워크를 추가하는 방식
		3) 직접 프레임워크 라이브러리를 추가하는 방식
	※ 프로젝트 생성 시 에러가 발생하는 경우
		생성시 프로젝트가 빨간색으로 에러표시가 나면 이클립스나 STS를 종료하고 사용자 폴더에 있는 .m2밑에 repository 폴더의 내용물을 삭제 해야한다.
		이후 이클립스를 재시작하면 자동으로 생성된 프로젝트를 점검하면서 관련 라이브러리를 다시 다운로드하게 된다.

2.1 스프링 버전 변경 	
	spring legacy project 생성 ( MAVEN을 통하여 라이브러리를 자동 수정 업데이트 할 수 있다.)
	spring legacy project 생성후 프로젝트는 Spring MVC Project를 이용해서 생성
프레임 워크를 사용하는 이유
- 프레임 워크란 뼈대나 근간을 말한다.
  프레임워크는 이미 개발에 필요한 구조를 이미 코드로 만들어 놓았다
  프레임워크를 사용하면 초급 개발자도 쉽게 개발을 할 수 있다. 
  개발자 입장에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣어주는 형태이므로 시간을 단축 할 수 있다.


- Java Library - Lombok

프로젝트 롬복은 표준판 코드를 최소화하거나 제거하는 데 사용되는 인기 있고 널리 사용되는 자바 라이브러리입니다. 개발 시간과 노력을 절약해주며, annotation(어노테이션, @)을 사용하여 소스 코드 가독성을 증가시켜줍니다.
@(annotation)
1. @Setter
2. @Getter
3. @toSting

생성자 관련 - @Annotation
@NoARgsConstructor 파라미터가 없는 기본 생성자를 만들어준다.
@AllArgsConstructor 모든 파라미터를 사용한 생성자를 만드는 어노테이션
@RequiredArgsConstructor @NonNull로 되어있는 필드나, 초기화가 안된 final필드에 대한 parameter로 받는 생성자를 만들어 낸다.

@Data 아래 lombok의 annotation들을 한꺼번에 적용시키는 annotation이다.
@Getter
@Getter
@toString
@RequiredArgsConstoructor
@EqualsAndHashCode

@Bulider 클래스에 빌더 패턴을 적용할 수 있게 해주는 annotation

- Sprign의 대표적인 Annotation

@Component 
 개발자가 생성한 Class를 Spring의 Bean으로 등록할 때 사용하는 Annotaion이다. Spring은 해당 Annotation을 보고 Spring 의 Bean으로 등록한다.

@ComponentScan
Spring Framework는 @Component, @Service, @Repository, @Controller, @Configuration중 1개라도
드록된 클래스를 찾으면, Context에 bean으로 등록한다.
@ComponentScan Annotation이 있는 클래스의 하위 Bean을 등록 될 클래스들을 스캔하여 Bean으로 등록해준다.

@Bean
 개발자가 제어가 불가능한 외부 라이브러리와 같은 것들을 Bean으로 만들 때 사용한다.

@Controller
 Spring에게 해당 Class가 Controller 역할을 한다고 명시하기 위해 사용하는 Annotation이다.

@RequestHeader
 Request의 header값을 가져올 수 있으며, 해당 Annotation을 쓴 메소드의 파라미터에 사용한다.

@RequestMapping
 요청 들어온 URI(Uniform Resource Identified) 요청 식별자의 요청과 Annotation Value 값이
일치하면 해당 클래스나 메소드가 실행된다.Controller 객체 안의 메서드와 클래스에 적용 가능하며,
아래와 같이 사용된다.
- Class 단위에 사용하면 하위 메소드에 모두 적용된다.
- 메소드에 적용되면 해당 메소드에서 지정한 방식으로 URI를 처리한다.

@RequestParam
 URL에 전달되는 파라미터를 메소드의 인자와 매칭시켜, 파라미ㅓ를 받아서 처리할 수 있는 Annotation이다.
Json 형식의 Body를 MessageConvert를 통해 Java객체로 변환 시킨다.

@RequestBody
 Boby에 전달되는 데이터를 메소드의 인자와 매칭시켜, 데이터를 받아서 처리할 수 있는 Annotation으로 
클라이언트가 보내는 HTTP 요청 본문(JSON및 XML 등)을 Java 오브젝트로 변환한다.
클라이언트가 body에 json or xml 과 같은 형태로 값(주로 객체)를 전송하면, 해당 내용을 Java Object로 변환한다.

@ModelAttribute
 클라이언트가 전송하는 HTTP parameter, Body 내용을 Setter 함수를 통해 1:1로 객체에 데이터를 연결(binding)한다. RequestBody와 다르게 HTTP Body 내용은 multipart/form-data 형태를 요구한다.
@RequestBody가 json을 받는 것과 달리 @ModelAttribute의 경우에는 json을 받아 처리할 수 없다.

@ResponseBody
 @ResponseBody은 메소드에서 리턴되는 값이 View로 출력되지 않고 HTTP Response Body에 직접 쓰여지게 된다. 
return 시에 json, xml과 같은 테이더를 return한다.

@Autowired
 Spring Framework에서 Bean 객체를 주입받기 위한 방법은 크게 아래 3가지이다.
 1) @Autowired
 2) 생성자 (@AllArgsConstructor 사용)
  3) setter
 Bean을 주입받기 위하여 @Autowired를 사용한다. Spring Framework가 Class를 보고 Type에 맞게(Type을 먼저 확인후, 없으면 Name확인) Bean을 주입

@GetMapping
 RequestMapping(Method=RequestMethod.GET)과 똑같은 역할을 한다.

@PostMapping
 RequestMapping(Method=RequestMethod.POST)과 똑같은 역할을 한다.

@Test
JUnit에서 테스트 할 대상을 표시한다.


- 스프링 Bean이란 
Spring IoC 컨테이너가 관리하는 자바 객체를 빈(Bean)이라고 부릅니다. IOC의 특징은 아래와 같습니다.

일반적으로 처음에 배우는 자바 프로그램에서는 각 객체들이 프로그램의 흐름을 결정하고 각 객체를 직접 생성하고 조작하는 작업(객체를 직접 생성하여 메소드 호출)을 했습니다. 즉, 모든 작업을 사용자가 제어하는 구조였습니다. 예를 들어 A 객체에서 B 객체에 있는 메소드를 사용하고 싶으면, B 객체를 직접 A 객체 내에서 생성하고 메소드를 호출합니다.
하지만 IOC가 적용된 경우, 객체의 생성을 특별한 관리 위임 주체에게 맡깁니다. 이 경우 사용자는 객체를 직접 생성하지 않고, 객체의 생명주기를 컨트롤하는 주체는 다른 주체가 됩니다. 즉, 사용자의 제어권을 다른 주체에게 넘기는 것을 IOC(제어의 역전) 라고 합니다.

우리가 알던 기존의 Java Programming 에서는 Class를 생성하고 new를 입력하여 원하는 객체를 직접 생성한 후에 사용했었습니다. 하지만 Spring에서는 직접 new를 이용하여 생성한 객체가 아니라, Spring에 의하여 관리당하는 자바 객체를 사용합니다. 이렇게 Spring에 의하여 생성되고 관리되는 자바 객체를 Bean이라고 합니다. Spring Framework 에서는 Spring Bean 을 얻기 위하여 ApplicationContext.getBean() 와 같은 메소드를 사용하여 Spring 에서 직접 자바 객체를 얻어서 사용합니다.


- JDBC란 (Java Database Connectivity)
- 자바에서 DB프로그래밍을 하기 위해 사용되는 API ==> DB종류에는 상관이 없다.
JDBC API 사용 기본 구성
웹(application) -> JDBCAPI -> JDBC드라이버 -> DB

JDBC 프로그래밍 코딩 흐름
1) JDBC 드라이버 로드
2) DB 연결
3) DB에 데이터를 읽거나 쓰기(SQL문)
4) DB 연결 종료

JDBC 드라이버
1) DBMS와 통신을 담당하는 자바 클래스
2) DBMS 별로 알맞는 JDBC 드라이버 필요(jar)
3) 로딩코드 : Class.forName("JDBC드라이버 이름")
- MySQL : com.mysql.jdbc.Driver
- 오라클 : oracle.jdbc.driver.OracleDriver
- MSSQL : com.microsoft.sqlserver.jdbc.SQLServerDriver

JDBC URL
1) DBMS와의 연결을 위한 식별 값
2) JDBC 드라이버에 따라 형식이 다름
3) 구성 : 
	- jdbc:[DBMS]:[데이터베이스식별자]
	- MySQL : jdbc:mysql://HOST[:PORT]/DBNAME[?param=value&param1=value2&..]
	- Oracle : jdbc:oracle:thin:@HOST:PORT:SID
	- MS SQL : jdbc:sqlserver://HOST[:PORT];databaseName=DB

커넥션 풀(DBCP)란(DataBase Connection Poll DB와 커넥션을 맺고잇는 객체를 관리하는 역할)
웹 컨테이너(WAS)가 실행되면서 DB와 미리 connection을 해놓은 객체들의 pool에 저장해두엇다가
클라이언트 요청이 오면 connection을 빌려주고, 처리가 끝나면 다시 connection을 반납 받아 pool에 저장하는 방식을 말한다.

특징 - 
- 웹 컨테이너(WAS)가 실행되면서 connection 객체를 미리 poo에 생성해둔다.
- HTTP 요청에 따라 pool에서 connection객체를 가져다 쓰고 반환한다.
- 이와 같은 방식으로 물리적인 데이터베이스 connection부하를 줄이고 연결 관리 한다.
- pool에 미리 connection이 생성되어 잇기 때문에 connection을 생성하는데 드는 요청마다 연결 시간이 소비되지 않는다.
- 커넥션을 계속해서 재사용하기 때문에 생성되는 커넥션 수를 제한적으로 설정한다.


동시 접속자가 많을 경우
 - 위에 connection pool 설명에 따르면, 동시 접속 할 경우 pool에서 미리 생성된 connection을 제공하고
    없을 경우는 사용자 connection 이 반환될 때까지 번호 순대로 대기 상태로 기다린다.
 - 여기서 WAS에서 커넥션 풀을 크게 설정하면 메모리 소모가 큰 대신 많은 사용자가 대기시간이 줄어들고,
     반대로 커넥션 풀을 적게 설정하면 그 만큼 대기시간이 길어진다.

커넥션 풀 종류 
 Commons DBCP, Tomcat-JDBC, BoneCP, HikariCP

MyBatis란 
 객체 지향 언어인 자바의 관계형 데이터베이스 프로그래밍을 좀 더 쉽게 할 수 있게 도와주는 개발 프레임 워크로서
JDBC를 통해 데이터베이스에 엑세스하는 잡업을 캡슐화하고 일반SQL 쿼리, 저장 프로 시저 및 고급 매핑을 지원하며 
모든 JDBC 코드 및 매개 변수의 중복 작업을 제거한다. MyBatis에서는 프로그램에 있는 SQL쿼리들을 한 구성 파일에 구성하여 프로그램 코드와
SQL을 분리할 수 있는 장점을 가지고 있다.

특징 - 복잡한 쿼리나 다이나믹한 쿼리에 강하다. 프로그램 코드와 SQL쿼리의 분리로 코드의 간결성 및 유지보수성 향상