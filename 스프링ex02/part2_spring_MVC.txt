Reference - https://velog.io/@falling_star3/Tomcat-%EC%84%9C%EB%B8%94%EB%A6%BFServlet%EC%9D%B4%EB%9E%80
1. 서블릿(Servlet)이란?


서블릿(Servlet)이란 동적 웹 페이지를 만들 때 사용되는 자바 기반의 웹 애플리케이션 프로그래밍 기술이다. 서블릿은 웹 요청과 응답의 흐름을 간단한 메서드 호출만으로 체계적으로 다룰 수 있게 해준다.

서블릿은 서버에서 실행되다가 웹 브라우저에서 요청을 하면 해당 기능을 수행한 후 웹 브라우저에 결과를 전송한다.

쉽게 예를들면 로그인 시도를 할 때, 서버가 클라이언트에서 입력되는 아이디와 비밀번호를 확인하고 결과를 응답하는데 이러한 역할을 수행하는 것이 서블릿이다.


▶ 서블릿(Servlet)의 주요 특징
클라이언트의 Request에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트
기존의 정적 웹 프로그램의 문제점을 보완하여 동적인 여러 가지 기능을 제공
JAVA의 스레드를 이용하여 동작
MVC패턴에서 컨트롤러로 이용됨
컨테이너에서 실행
보안 기능을 적용하기 쉬움


✏️ 2. 서블릿의 동작과정


클라이언트가 웹 서버에 요청하면 웹 서버는 그 요청을 톰캣과 같은 WAS에 위임한다. 그러면 WAS는 각 요청에 해당하는 서블릿을 실행한다. 그리고 서블릿은 요청에 대한 기능을 수행한 후 결과를 반환하여 클라이언트에 전송한다.

1. 클라이언트 요청
2. HttpServletRequest, HttpServletResponse 객체 생성
3. Web.xml이 어느 서블릿에 대해 요청한 것인지 탐색
4. 해당하는 서블릿에서 service() 메소드 호출 
5. doGet() 또는 doPost() 호출 
6. 동적 페이지 생성 후 ServletResponse 객체에 응답 전송
7. HttpServletRequest, HttpServletResponse 객체 소멸
※ web.xml : 서블릿을 작성했다면 해당 서블릿을 사용자가 요청한 경로와 맵핑시켜야 WAS에서 맵핑된 정보를 읽어서 브라우저에서 해당 URL로 HTTP요청 시 해당 서블릿으로 요청을 전달해 줄 수 있다. 소스를 분석할 때도 가장 먼저 확인해봐야 할 부분이다. 톰캣을 예로 들면 웹 어플리케이션 서비스 처리에 대해 정의된 환경 설정 파일이 server디렉터리의 web.xml에 있다.

▶ 서블릿 형식
public class FirstServlet extends HttpServlet {
	@Override
    public void init() {
    ...
	}
    
    @Override
    public void doGet(HttpServletRequest req, HttpServletResponse resp) {
    ...
    }
    
    @Override
    public void destroy() {
    ...
    }
}


✏️ 3. 서블릿의 생명주기
서블릿도 자바 클래스이므로 실행하면 초기화부터 서비스 수행 후 소멸하기까지의 과정을 거친다. 이 과정을 서블릿의 생명주기라하며 각 단계마다 호출되어 기능을 수행하는 콜백 메서드를 서블릿 생명주기 메서드라한다.

클라이언트의 요청이 들어오면 컨테이너는 해당 서블릿이 메모리에 있는지 확인하고, 없을 경우 init()메서드를 호출하여 메모리에 적재한다. init()은 처음 한번만 실행되기 때문에, 서블릿의 스레드에서 공통적으로 사용해야 하는 것이 있다면 오버라이딩 하여 구현하면 된다. 실행 중 서블릿이 변경될 경우, 기존 서블릿을 destroy()하고 init()을 통해 새로운 내용을 다시 메모리에 적재한다.

init()이 호출된 후 클라이언트의 요청에 따라서 service() 메소드를 통해 요청에 대한 응답이 doGet()과 doPost()로 분기된다. 이 때 서블릿 컨테이너가 클라이언트의 요청이 오면 가장 먼저 처리하는 과정으로 생성된 HttpServletRequest, HttpServleResponse에 의해 request와 response 객체가 제공된다.

컨테이너가 서블릿에 종료 요청을 하면 destroy() 메소드가 호출되는데 마찬가지로 한번만 실행되며, 종료시에 처리해야 하는 작업들은 destroy() 메소드를 오버라이딩하여 구현하면 된다.


▶ 서블릿 생명주기 메서드
초기화 : init()

서블릿 요청 시 맨 처음 한 번만 호출된다.
서블릿 생성 시 초기화 작업을 주로 수행한다.
작업 수행 : doGet(), doPost()

서블릿 요청 시 매번 호출된다.
실제로 클라이언트가 요청하는 작업을 수행한다.
종료 : destroy()

서블릿이 기능을 수행하고 메모리에서 소멸될 때 호출된다.
서블릿의 마무리 작업을 주로 수행한다.


✏️ 4. 서블릿 컨테이너
서블릿 컨테이너란, 구현되어 있는 servlet 클래스의 규칙에 맞게 서블릿을 담고 관리해주는 컨테이너다. 클라이언트에서 요청을 하면 컨테이너는 HttpServletRequest, HttpServletResponse 두 객체를 생성하여 post, get여부에 따라 동적인 페이지를 생성하여 응답을 보낸다.

- 웹서버와의 통신 지원

서블릿 컨테이너는 서블릿과 웹서버가 손쉽게 통신할 수 있게 해준다. 일반적으로 소켓을 만들고 listen, accept 등을 해야하지만 서블릿 컨테이너는 이러한 기능을 API로 제공하여 복잡한 과정을 생략할 수 있게 해준다. 그래서 개발자가 서블릿에 구현해야 할 비지니스 로직에 대해서만 초점을 두게끔 도와준다.


- 서블릿 생명주기 관리

서블릿 컨테이너는 서블릿 클래스를 로딩하여 인스턴스화하고, 초기화 메소드를 호출하고, 요청이 들어오면 적절한 서블릿 메소드를 호출한다. 또한 수명이 다 된 서블릿을 적절하게 가비지 콜렉터를 호출하여 필요없는 자원 낭비를 막아준다.


- 멀티쓰레드 지원 및 관리

서블릿 컨테이너는 Request가 올 때마다 새로운 자바 쓰레드를 하나 생성하는데, HTTP 서비스 메소드를 실행하고 나면, 쓰레드는 자동으로 죽게 된다. 원래는 쓰레드를 관리해야 하지만 서버가 다중 쓰레드를 생성 및 운영해주니 쓰레드의 안정성에 대해서 걱정하지 않아도 된다.


- 선언적인 보안 관리

서블릿 컨테이너를 사용하면 개발자는 보안에 관련된 내용을 서블릿 또는 자바 클래스에 구현해 놓지 않아도 된다. 일반적으로 보안관리는 XML 배포 서술자에다가 기록하므로, 보안에 대해 수정할 일이 생겨도 자바 소스 코드를 수정하여 다시 컴파일 하지 않아도 보안관리가 가능하다.





-MVC의 servlet과 view를 내부적으로 Spring에서 처리하고 중요기능은 개발자가 코드할 수 있도록 하는 형태

모델 2와 스프링 MVC 
모델2라는 방식은 로직과 화면을 분리하는 개발 방식 스타일을 말한다.
모델 2방식은 MVC의 구조를 사용한다.

1) 사용자의 Request는 Request-controller인 DispatcherServlet을 통해서 처리한다.(프로젝트의 web.xml을 보면 모든 Request는 DispacherServlet이 받도록 처리 되어있다.)

2) HandlerMapping 인터페이스를 구현한 여러 객체들 중 RequestMappingHandlerMap-ping같은 경우 개발자가 @RequestMapping 어노테이션이 적용된 것을 기준으로 판단하게 된다.
     적절한 컨트롤러가 찾아졌다면 HandlerAdapter를 이용해서 해당 컨트롤러를 동작시키다.

3) Controller는 개발자가 작성하는 클래스로 실제 Request를 처리하는 로직을 작성하게 된다. 이때 view에 전달해야 하는 데이터는 주로 Model이라는 객체에 담아서 전달한다.
 Controller는 다양한 타입의 결과를 반환하는데 이에 대한 처리는 ViewResolver를 이용하게 된다.

4) viewResolver는 Controller가 반환한 결과를 어떤 View를 통해서 처리하는 것이 좋을지 해석하는 역할이다. 가장 흔하게 사용하는 설정은 servlet-context.xml에 정의된 Inter-nalResourceViewResolver이다.

5) View는 실제로 응답 보내야하는 데이터를 JSP등을 이용해서 생성하는 역할을 하게 된다. 만들어진 응답은 DispatcherServlet을 통해서 전송된다.

-----> 이 모든 Request는 DispatcherServlet을 통하도록 설계되는데, 이런 방식을 Front-Controller 패턴이라고 한다.
	모델 2 방식에서 사용자의 Request는 특별한 상황이 아닌 이상 먼저 Controller를 호출하게 된다. 이렇게 설계하는 큰 이유는 나중에 View를 교체하더라도 사용자가 호출하는 URL 자체에 변화가 없게 만들어
	주기 때문이다.
	controller는 데이터를 처리하는 존재를 이용해서 데이터(Model)를 처리하고 Response 할 때 필요한 데이터(Model)를 View 쪽으로 전달하게 된다.
	Servlet을 이용하는 경우 개발자들은 Servlet API의 RequestDispatcher 등을 이용해서 이를 직접 처리해 왔지만 스프링 MVC는 내부에서 이러한 처리를 하고, 개발자들은 MVC의 API를 이용해서 코드를 작성하면 된다.




스프링 MVC의 Controller의 특징
- HttpServletRequest, HttpServletResponse를 거의 사용할 필요 없이 필요한 기능 구현
- 다양한 타입의 파라미터 처리, 다양한 타입의 리턴 타입 사용 가능
- GET 방식, POST 방식 등 전송 방식에 대한 처리를 어노테이션으로 처리 가능
- 상속/ 인터페이스 방식 대신에 어노테이션만으로도 필요한 설정 가능

@Controller 어노테이션을 지정하면 
그 해당 클래스는 스프링의 객체(Bean)으로 등록되는데 Servlet-context.xml에 가면 <context:conponent-scan>이라는 태그를 이용해서 지정된 패키지를 조사(스캔)하도록 설정되어 있다.

해당 패키지에 선언된 클래스들을 조사하면서 스프링에서 객체(Bean) 설정에 사용되는 어노테이션들을 가진 클래스들을 파악하고 필요하다면 이를 객체로 생성해서 관리하게 된다.
클래스 선언부에는 @Controller와 RequestMapping을 많이 사용한다.

@RequestMapping 어노테이션은 현재 클래스의 모든 메서드들의 기본적이 URL 경로가 된다.
- @Controller는 추가적인 속성을 지정할 수 없지만, @RequestMapping은 몇 가지의 속성을 추가할 수 있다.
이 중에서도 많이 사용하는 것이 Method 속성이다. Method 속성은 흔히 GET방식, POST방식을 구분해서 사용할때 이용한다.
4.3버전 이후 부터는
@RequestMapping을 줄여서 사용할 수 있는 @GetMapping과 @PostMapping이 생겻다. 축약형의 표현이다.


Controller의 파라미터 수집
- Controller를 작성할 때 가장 편리한 기능은 파라미터가 자동으로 수집되는 기능이다.
이 기능을 이용하면 매번 request, getParameter()를 이용하는 불편함을 없앨 수 있다.

파라미터를 이용할 DTO 클래스를 생성하여
	
예제)	SampleDTO 클래스
	
	package org.zerock.domain;

	import lombok.Data;

	@Data
	public class SampleDTO {
	
		private String name;
		private int age;
	}


Lombok의 @Data 어노테이션을 이용해서  getter/setter, equals(), toString()등의 메서드를 자동 생성하여 편리하다.

Controller의 메서드가 파라미터로 이용할 SampleDTO클래스를 파라미터 사용하게 되면 자동으로 setter메서드가 동작하면서 파라미터를 수집하게 된다.


예제)	SampleController 클래스
	

	package org.zerock.controller;

import java.util.ArrayList;
import java.util.Arrays;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.zerock.domain.SampleDTO;
import org.zerock.domain.SampleDTOList;

import lombok.extern.log4j.Log4j;





@Controller
@RequestMapping("/sample/*")
@Log4j
public class SampleController {

	@RequestMapping("")
	public void basic() {
		
		log.info("basic..............................");
	}
	
	// @RequestMapping에 GET,POST방식 모두를 지원해야하면 이렇게 Method 속성을 배열로 표기하여 처리할 수 있다.
	// GET,POST말고고 PUT, DELETE방식이 있다.
	@RequestMapping(value = "/basic", method = {RequestMethod.GET, RequestMethod.POST})
	public void basicGet() {
		
		log.info("basic get...............");
	}
	
	// @RequestMapping에 Method 속성에 GET방식을 줄여서 사용하는 @GetMapping 어노테이션
	@GetMapping("/basicOnlyGet")
	public void basicGet2() {
		
		log.info("basic get only get................................");
	}
	
	@GetMapping("/ex01")
	public String ex01(SampleDTO dto) {
		
		log.info("" + dto);
		
		return "ex01";
		
	}

	/*url에 ?name=AAA&age=10과 같은 형태로 추가해서 호출을 하면 SampleDTO 객체 안에 name과 age 속성이 제대로 수집된 것을 볼 수 있다.
	  여기서 주목할 점은 자동으로 타입을 변환해서 처리한다는 점이다. */

	
	// 파라미터 수집과 변환
	@GetMapping("/ex02")
	public String ex02(@RequestParam("name") String name, @RequestParam("age") int age) {
		
		log.info("name: " + name);
		log.info("age: " + age);
		
		return "ex02";
	}
	/* 파라미터를 수집하는 방식은 파라미터 타입에 따라 자동으로 변환하는 방식을 이용한다.
	SampleDTO int타입으로 선언된 age가 자동으로 숫자로 변환된다.
	만일 기본 자료형이나 문자열 등을 이용한다면 파라미터의 타입만을 맞게 선언해주는 방식을 사용할 수 있다.
	파라미터에 @RequestParam 어노테이션은 파라미터로 사용된 변수의 이름과 전달되는 파라미터의 이름이 다른 경우에 유용하게 사용된다.
	스프링에서는 Http 요청 파라미터 값을 편리하게 사용하게 해주는 @RequestParam을 지원한다.
	HttpServletRequest의 request.getParameter의 기능과 동일하다고 보면 된다.*/
	
	// 리스트, 배열 처리
	@GetMapping("/ex02List")
	public String ex02List(@RequestParam("ids") ArrayList<String> ids) {
		
		log.info("ids: " + ids);
		
		return "ex02List";
	}
	
	// 배열의 경우도 동일하게 처리할 수 있다.
	@GetMapping("/ex02Array")
	public  String ex02Array(@RequestParam("ids") String[] ids) {
		
		log.info("array ids : " + Arrays.toString(ids));
		
		return "ex02Array";
	}

	/* 동일한 파라미터가 여러 개 전달되는 경우에는 ArrayList<> 등을 이용해서 처리가 가능하다.
	스프링은 파라미터의 타입을 보고 객체를 생성하므로 파라미터의 타입은 List<>와 같이 인터페이스 타입이 아닌 실제적인 클래스 타입으로 지정한다.
	위 코드의 경우 ids라는 이름의 파라미터가 여러 개 전달되더라도 ArrayList<String>d이 생성되어 자동으로 수집된다. */
	
	// 객체 리스트
	@GetMapping("/ex02Bean")
	public String ex02Bean(SampleDTOList list) {
		
		log.info("list dtos : " + list);
		
		return "ex02Bean";
	}

	/* 만일 전달하는 데이처가 SampleDTO와 같이 객체 타입이고 여러 개를 처리해야 한다면 약간의 작업을 통해서 한 번에 처리를 할 수 있다.
	예를 들어 SampleDTO를 여러 개 전달받아서 처리하고 싶다면 SampleDTO의 리스트를 포함하는 SampleDTOList클래스를 설계한다.
	SampleController에서는 SampleDTOList 타입을 파라미터로 사용하는 메서드를 작성하고 파라미터는 '[인덱스]'와 같은 형식으로 전달해서 처리할 수 있다.
	URL을 호출하게 되면 여러 개의 SampleDTO 객체를생성하는 것을 볼 수 있다.
	※ Tomcat 버전에 따라서 []같은 문자를 특수문자로 인식하지 못한다. 
	[ 문자의 경우는 --> %5B로
	] 문자의 경우는 --> %5D로 변경*/


}


예제) SampleDTOList클래스
	package org.zerock.domain;

import java.util.ArrayList;
import java.util.List;

import lombok.Data;

@Data
public class SampleDTOList {
	
	private List<SampleDTO> list;
	
	public SampleDTOList() {
		list = new ArrayList<>();
	}
}

@InitBinder
- 파라미터의 수집을 다른 영오르는 binding이라고 한다. 변환이 가능한 테이터는 자동으로 변환되지나 경우에 따라서는 파라미터를 변환해서 처리해야 하는 경우도 존재한다.
  화면에서 '2018-01-01'과 같이 문자열로 전달된 데이터를 java.util.Date 타입으로 변환하는 작업이 그러하다. 
   스프링 Controller에서는 파라미터를 바인딩할 때 자동으로 호출되는 @InitBinder를 이용해서 이러한 변환을 처리할 수 있다.

예제)TodoDTO 클래스
	
package org.zerock.domain;

import java.util.Date;

import org.springframework.format.annotation.DateTimeFormat;

import lombok.Data;

@Data
public class TodoDTO {

	private String title;
	private Date dueDate;
	
}

TodoDTO에는 특별하게 dueDate 변수의 타입이 java.util.Date 타입이다. 만일 사용자가 '2018-01-01'과 같이 들어오는 데이터를 변환하고자 할 때 문제가 발생하게 됩니다. 
이러한 문제의 간단한 해결책은 @InitBinder를 이용하는 것이다.

SampleController 클래스에

// @InitBider --> 바인딩처리
@InitBinder
public void initBinder(WebDataBinder binder) {
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	binder.registerCustomEditor(java.util.Date.class, new CustomDateEditor(dateFormat, false));
}


@GetMapping("/ex03")
	public String ex03(TodoDTO todo) {
		log.info("todo : " + todo);
		return "ex03";
	}

추가하고

만일 브라우저에서 'http://localhost:8081/sample/ex03?title=test&dueDate=2018-01-01'과 같이 호출했다면 서버에서는 정상적으로 파라미터를 수집해서 처리합니다.

@DateTimeFormat
@InitBinder를 이용해서 날짜를 변환할 수도 있지만, 파라미터로 사용되는 인스턴스 변수에 @DateTimeFormat을 적용해도 변환이 가능합니다.
※ @DateTimeFormat을 이용하는 경우에는 @InitBinder는 필요하지 않다.


@Data
public class TodoDTO {

	private String title;
	private Date dueDate;
	@DateTimeFormat(pattern = "yyyy/MM/dd")
	private Date dueDate1;
	
}

문자열로 'yyyy/MM/dd'의 형식이 맞다면 자동으로 날짜 타입으로 변환이 된다.

Model이라는 데이터 전달자
-Controller의 메서드를 작성할 때는 특별하게 Model이라는 타입을 파라미터로 지정할 수 있다. Model 객체는 JSP에 컨트롤러에서 생성된 데이터를 담아서 전달하는 역할을 하는 존재이다.
 이를 이용해서 JSP와 같은 뷰(View)로 전달해야 하는 데이터를 담아서 보낼 수 있다.
 메서드의 파라미터에 Model 타입이 지정된 경우에는 스프링은 특별하게 Model 타입의 객체를 만들어서 메서드에 주입하게 된다.
 
 Model은 모델 2 방식에서 사용하는 request.setAttribute()와 유사한 역할을 한다. 
메서드의 파리밑를 Model타입으로 선언하게 되면 자동으로 스프링 MVC에서 Model타입의 객체를 만들어 주기 때문에 개발자의 입장에서는 필요한 데이터를 담아주는 작업만으로 모든 작업이 완료된다.
Model을 사용해야 하는 경우는 주로 Controller에 전달된 데이터를 이용해서 추가적인 데이터를 가져와야하는 상황이다.

예를 들어, 다음과 같은 경우들을 생각해 볼 수 있다.
- 리스트 페이지 번호를 파라미터로 전달받고, 실제 데이터를 View로 전달해야 하는 경우
- 파라미터들에 대한 처리 후 결과를 전달해야 하는 경우

@ModelAttribute 

- 웹페이지의 구조는 Request에 전달된 데이터를 가지고 필요하다면 추가적인 데이터를 생성해서 화면으로 전달하는 방식으로 동작한다. 
 Model의 경우는 파라미터로 전달된 데이터는 존재하지 않지만 화면에서 필요한 데이터를 전달하기 위해서 사용한다. 
 예를 들어 페이지 번호는 파라미터로 전달되지만, 결과 데이터를 전달하려면 Model에 담아서 전달한다.

 스프링 MVC의 Controller는 기본적으로 Java Beans 규칙에 맞는 객체는 다시 화면으로 객체를 전달한다. 
 좁은 의미에서 Java Beans의 규칙은 단순히 생성자가 없가나 빈 생성자를 가져야 하며, getter/setter를 가진 클래스의 객체들을 의미한다. 
 앞의 예제에서 파라미터로 사용된 SampleDTO의 경우는 Java Bean의 규칙에 맞기 때문에 자동으로 다시 화면까지 전달된다. 전달될 때에는 클래스명의 앞글자는 소문자로 처리된다.
 ※ Controller 파일에 Bean Graph를 보면 클래스 앞이 소문자로 기재 되어있다.

 반면에 기본 자료형의 경우는 파라미터로 선언하더라도 기본적으로 화면까지 전달되지는 않는다.

예제) SampleDTO에 메소드 추가

 	@GetMapping("/ex04")
	public String ex04(SampleDTO dto, int page) {
		
		log.info("dto : " + dto);
		log.info("page : " + page);
		
		return "/sample/ex04";
	}

ex04()는 SampleDTO 타입과 Int타입의 데이터를 파라미터로 사용한다. 결과를 확인하기 위해 '/WEB-INF/views' 폴더 아래 sample 폴더를 생성하고 리턴값에서 사용한 'ex04'에 해당하는
ex04.jsp를 작성한다. (View화면을 생성)

예제) ex04.jsp(화면생성)

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html14/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
</head>
<body>
<h2>SAMPLEDTO ${sampleDTO }</h2>
<h2>PAGE ${page }</h2>

</body>
</html>

서버를 실행하고 브라우저를 통해서 'http://localhost:8081/sample/ex04?name=aaa&age=11&page=9'와 같이 호출하면 화면에 SampleDTO만이 전달된 것을 확인할 수 있다.
int 타입으로 선언된 page는 전달되지 않는다.
-추가 설명
 page 파리미터 값으로 호출은 되지만 화면에서는 전달이 되지 않는다. 그 이유는 MVC Controller는 Java Beans 규칙에 맞는 객체는 다시 화면으로 객체를 전달하는데 모델에는 int page는 
없기 때문에 int page를 화면에는 출력이 안되기 때문이다. 하지만 호출은 가능하다.
강제로 모델에 파라미터를 담아서 전달할때 @ModelAttribute를 사용하면 타입에 관계없이 모델에 담겨 화면에 전달된다.

@GetMapping("/ex04")
public String ex04(SampleDTO dto,@ModelAttribute("page") int page) {
		
	log.info("dto : " + dto);
	log.info("page : " + page);
		
	return "/sample/ex04";
}

@ModelAttribute는 강제로 모델에 파라미터를 담아서 전달할때 사용하는 에노테이션이다. 타입에 관계없이 모델에 담겨 화면에 전달할 수 있다.

Controller의 리턴 타입 
스프링 MVC의 구조가 기존의 상속과 인터페이스에서 어노테이션을 사용하는 방식으로 변환 이후에 가장 큰 변화 중 하나는 리턴 타입이 자유로워 졌다는 점이다.

Controller의 메서드가 사용할 수 있는 리턴 타입
- String: jsp를 이용하는 경우에는 jsp 파일의 경로와 파일이름을 나타내기 위해서 사용한다.
- void: 호출하는 URL과 동일한 이름의 jsp를 의미한다.
- VO, DTO 타입 : 주로 JSON 타입의 데이터를 만들어서 변환하는 용도로 사용한다.
- ResponseEntity 타입: response 할 때 Http 헤더 정보와 내용을 가공하는 용도로 사용한다.
- Model, ModelAndView: Model로 데이터를 반환하거나 화면까지 같이 지정하는 경우에 사용한다.(최근에는 많이 사용하지 않는다.)
- HttpHeaders: 응답에 내용 없이 Http 헤더 메시지만 전달하는 용도로 사용한다.

Void 타입 
메서드의 리턴 타입을 void로 지정하는 경우 일반적인 경우에는 해당 URL의 경로를 그대로 jsp 파일의 이름으로 사용하게 된다.

예제) 

@GetMapping("ex05")
	public void ex05() {
		log.info("/ex05........................");
}

404에러가 나오면 화면이 없어서 나오는 문제이다.

String 타입
void 타입과 더불어서 가장많이 사용하는 것은 String 타입이다. String 타입은 상황에 따라 다른 화면을 보여줄 필요가 있을 경우에 유용하게 사용한다.(if ~ else와 같은 처리가 필요한 상황)
일반적으로 String 타입은 현재 프로젝트의 경우 JSP 파일의 이름을 의미하다.

프로젝트 생성 시 기본으로 만들어진 HomeController의 코드를 보면 String을 반환 타입으로 사용하는 것을 볼 수 있다.

package org.zerock.controller;

import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	*****--->>>> String 타입은 view 파일인 home.jsp 파일을 인식한다.
	Home() 메서드는 'home'이라는 문자열을 리턴했기 때문에 경로는 '/WEB-INF/views/home.jsp' 경로가 된다.
	String 타입에는 
	- redirect : 리다이렉트 방식으로 처리하는 경우
	- forward : 포워드 방식으로 처리하는 경우
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "home";
	}
	
}

객체 타입
Controller의 메서드 리턴 타입을 VO(Value Object)나 DTO(Data Transfer Object)타입 등 복합적인 데이터가 들어간 객체 타입으로 지정할 수 있는데, 이 경우는 주로 JSON 데이터를 만들어 내는 용도로 사용한다.
우선 이를 위해서는 jackson-databind 라이브러리를 pom.xml에 추가한다.

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		    <version>2.9.4</version>
		</dependency>

SampleController에는 아래와 같은 메서드를 생성

	@GetMapping("ex06")
	public @ResponseBody SampleDTO ex06() {
		log.info("/ex06....................");
		SampleDTO dto = new SampleDTO();
		dto.setAge(10);
		dto.setName("홍길동");
		
		return dto;
	}


개발자 도구를 통해서 살펴보면 서버에서 전송하는 MIME 타입이 'application/json'으로 처리되는 것을 볼 수 있습니다. 만일 Jackson-databind 라이브러리가 포함되지 않았다면 500에러가 뜬다.
스프링 MVC는 리턴 타입에 맞게 데이터를 변환해 주는 역할을 지정할 수 있는데 기본적으로 JSON은 처리가 되므로 별도의 설정이 필요로 하지 않는다.
(스프링 3버전까지는 별도의 Converter를 작성해야만 했다.)

ResponseEntity 타입
Web을 다루다 보면 HTTP 프로토콜의 헤더를 다루는 경우도 종종 있다. 스프링 MVC의 사상은 HttpServletRequest나 HttpServletResponse를 직접 핸들링하지 않아도 이런 작업이 가능하도록 작성되엇기 때문에
이러한 처리를 위해 ResponseEntity를 통해서 원하는 헤더 정보나 데이터를 전달할 수 있다.

예제) SampleController 메소드 추가

	@GetMapping("ex07")
	public ResponseEntity<String> ex07(){
		log.info("/ex07....................................");
		
		// {"name": "홍길동"}
		String msg = "{\"name\": \"홍길동\"}";
		
		HttpHeaders header = new HttpHeaders();
		header.add("Content-Type", "application/json;charset=UTF-8");
		
		return new ResponseEntity<>(msg, header, HttpStatus.OK);
	}

ResponesEntity는 HttpHeaders 객체를 같이 전달할 수 있고, 이를 통해서 원하는 HTTP 헤더 메시지를 가공하는 것이 가능하다. ex07()의 경우 브라우저에는 JSON 타입이라는 헤더 메시지와 200 OK라는 상태 코드를 전송한다.

파일 업로드 처리

Controller의 많은 작업은 스프링 MVC를 통해서 처리하기 때문에 개발자는 자신이 해야 하는 역할에만 집중해서 코드를 작성할 수 있지만, 조금 신경 써야 하는 부분이 있다면 파일을 업로드하는 부분에 대한 처리일 것이다.
파일 업로드를 하기 위해서는 전달되는 파일 데이터를 분석해야 하는데, 이를 위해서 Servlet 3.0 전까지는 commons의 파일 업로드를 이용하거나 cos.jar 등을 이용해서 처리를 해 왔다.
Servlet 3.0 이후(Tomcat 7.0)에는 기본적으로 업로드되는 파일을 처리할 수 있는 기능이 추가되어 있으므로 더 이상 추가적인 라이브러리가 필요로 하지 않는다.

조금 아쉬운 점은 'Spring Legacy Project'로 생성되는 프로젝트의 경우 Servlet 2.5를 기준으로 생성되기 때문에 3.0 이후에 지원되는 설정을 사용하기 어렵다는 점이다.
3.0 이상의 파일 업로드 방식은 후반부에 별도 파트에서 다루도록 하고 예제는 일반적으로 많이 사용하는 commons-fileupload를 이용하도록 하겠습니다.

pom.xml에 추가
<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.3.3</version>
		</dependency>

라이브러리를 추가한 후 파일이 임시로 업로드될 폴더를 C 드라이브 아래 upload/tmp로 작성한다.

servlet-context.xml 설정
servlet-contect.xml은 스프링 MVC의 특정한 객체(빈)를 설정해서 파일을 처리한다. 다른 객체(Bean)를 설정하는 것과 달리 파일 업로드의 경우에는 반드시 id 속성의 값을 'multipartResolver'로 정확하게 지정해야 하므로
주의가 필요하다.

<!-- multipartFile 빈객체 정의 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="utf-8"></beans:property>
		<!-- 1024 * 1024 * 10 bytes 10MB -->
		<beans:property name="maxUploadSize" value="104857560"></beans:property>
		<!-- 1024 * 1024 * 10 bytes 2MB -->
		<beans:property name="maxUploadSizePerFile" value="2097152"></beans:property>
		<beans:property name="uploadTempDir" value="file:/C:/upload/tmp"></beans:property>
		<beans:property name="maxInMemorySize" value="10485756"></beans:property>
	</beans:bean>

maxUploadSize는 한 번의 Request로 전달될 수 있는 최대의 크기를 의미하고, maxUploadSizePerFile은 하나의 파일 최대 크기, maxInMemorySize는 메모리상에서 유지하는 최대의 크기를 의미한다.
만일 이 크기 이상의 데이터는 uploadTempDir에 임시 파일의 형태로 보관된다.
uploadTempDir에서 절대 경로를 이용하려면 URI형태로 제공해야 하기 때문에 'file:/'로 시작하도록 한다. defaultEncoding은 업로드하는 파일의 이름이 한글일 경우 깨지는 문제를 처리한다.

예제) SampleController
@GetMapping("/exUpload")
	public void exUpload() {
		log.info("/exUpload........................");
	}

파일 업로드를 해 볼 /WEB-INF/views/sample/exUpload.jsp 파일 작성한다.

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html14/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
</head>
<body>

<form action="/sample/exUploadPost"  method="post"
				enctype="multipart/form-data">

	<div>
		<input type='file' name="files">
	</div>
		<div>
		<input type='file' name="files">
	</div>
		<div>
		<input type='file' name="files">
	</div>
	<div>
		<input type='file' name="files">
	</div>
	<div>
		<input type='file' name="files">
	</div>
	<div>
		<input type='submit'>
	</div>
				
				
</form>

</body>
</html>

exUpload.jsp의 action 속성값은 '/sample/exUploadPost'로 작성되었으므로, 이에 맞는 메서드를 SampleController에 추가한다.

	@PostMapping("/exUploadPost")
	public void exUploadPost(ArrayList<MultipartFile> files) {
		
		files.forEach(file -> {
			log.info("-------------------------------------------------------");
			log.info("name:" + file.getOriginalFilename());
			log.info("size:" + file.getSize());
		});
	}
스프링 MVC는 전달되는 파라미터가 동일한 이름으로 여러 개 존재하면 배열로 처리가 가능하므로 파라미터를 MultipartFile의 배열 타입으로 작성한다. 실제로 파일을 업로드해 보면 아래와 같은 결과를 볼 수 있다.
현재 설정은 한 파일의 최대 크기가 2MB이므로 그볻 작은 크기의 파일을 지정해서 업로드를 테스트한다.

위의 그림에서 중간에 보이는 로그는 SampleController에서 업로드 정보가 올바르게 처리되는 것을 보여주고 있다.
최종 업로드를 하려면 byte[]를 처리해야 하는데 예제는 아직 처리하지 않은 상태이다. 

Controller의 Exception 처리
Controller를 작성할 때 예외 상황을 고려하면 처리해야 하는 작업이 엄청나게 늘어날 수 밖에 없다. 스프링 MVC에서는 이러한 작업을 다음과 같은 방식으로 처리할 수 있습니다.
- @ExceptionHandler와 @ControllerAdvice를 이용한 처리
- @ResponseEntity를 이용하는 예외 메시지 구성

@ControllerAdvice
@ControolerAdvice는 뒤에는 배우게 되는 AOP(Aspect-Oriented-ProGramming)를 이용하는 방식이다.
AOP에 대해서는 별도의 파트에서 설명하겠지만, 간단히 언급하자면 핵심적인 로직은 아니지만 프로그램에서 필요한 '공통적인 관심사(cross-concern)는 분리'하자는 개념이다.
Controller를 작성할 때는 메서드의 모든 예외사항을 전부 핸들링해야 한다면 중복적이고 많은 양의 코드를 작성해야 하지만, AOP방식을 이용하면 공통적인 예인사항에 대해서는 별도로
@ControllerAdvice를 이용해서 분리하는 방식이다.

예제를 위해 프로젝트에 org.zerock.exception이라는 패키지를 생성하고, CommonExceptionAdvice 클래스를 생성하다.
CommonExceptionAdvice는 @ContorllerAdvice 어노테이션을 적용하지만 예외 처리를 목적으로 생성하는 클래스이므로 별도의 로직을 처리하지는 않는다.

package org.zerock.exception;


import org.springframework.http.HttpStatus;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.NoHandlerFoundException;

import lombok.extern.log4j.Log4j;

@ControllerAdvice
@Log4j
public class CommonExceptionAdvice {

		@ExceptionHandler(Exception.class)
		public String except(Exception ex, Model model) {
			
			log.error("Exception........ " + ex.getMessage());
			model.addAttribute("exception", ex);
			log.error(model);
			return "/sample/error_page";
		}
		
}

CommonExceptionAdvice 클래스에는 @ControllerAdvice라는 어노테이션과 @ExceptionHandler라는 어노테이션을 사용하고 있다.
@ControllerAdvice는 해당 객체가 스프링의 컨트롤러에서 발생하는 예외를 처리하는 존재임을 명시하는 용도로 사용하고, @ExceptionHandler는 해당 메서드가() 들어가는 예외 타입을 처리한다는
것을 의미한다.
@ExceptionHandler 속성으로는 Exception 클래스 타입을 지정할 수 있다. 위와 같은 경우 Exceptio.class를 지정하였으므로 모든 예외에 대한 처리가 except()만을 이용해서 처리할 수 있다.

만일 특정한 타입의 예외를 다루고 싶다면 Exception.class 대신에 구체적인 예외의 클래스를 지정해야 한다.
JSP화면에서도 구체적인 메시지를 보고 싶다면 Model을 이용해서 전달하는 것이 좋습니다. org.zerock.exception 패키지는 servlet-context.xml에서 인식하지 않기 때문에 <component-scan>을 이용해서 해당 패키지의
내용을 조사하도록 해야 하다.

servlet-context.xml 추가

<context:component-scan base-package="org.zerock.controller"></context:component-scan>
<context:component-scan base-package="org.zerock.exception"></context:component-scan>

CommonExceptionAdvice의 except()의 리턴값은 문자열이므로 JSP 파일의 경로가 된다. 
JSP는 error_page.jsp이므로 /WEB-INF/views 폴더 내에 작성해야 한다.

error_page.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page session="false"  import="java.util.*"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html14/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
<h4><c:out value="${exception.getMessage() }"></c:out></h4>

<ul>
	<c:forEach items="${exception.getStackTrace() }" var="stack">
		<li><c:out value="${stack }"></c:out></li>
	</c:forEach>
</ul>

</body>
</html>

예외의 메시지가 정상적으로 출력되는지 확인해 보려면 고의로 숫자나 날짜 등의 파라미터 값을 변환에 문제 있게 만들어서 호출해 볼 수 있다. 
예를 들어, '/sample/ex04?name=aaa&age=11&page=9'와 호출해야 하는 URL에서 고의로 age 값을 숫자로 변환할 수 없게 다른 값을 전달해 보거나 page와 같은 파라미터를 생략하는 등의 작업을 통해서 확인할 수 있다.
아래 화면은 고의로 age 값을 'bbb'와 같은 문자열로 전송하였을 때 보이는 화면이다.

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html14/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
<h1>해당 URL은 존재하지 않습니다.</h1>

</body>
</html>

브라우저에서 존재하지 않는 URL을 호출하면 custom404.jsp 페이지가 보이는 것을 확인할 수 있다. 
