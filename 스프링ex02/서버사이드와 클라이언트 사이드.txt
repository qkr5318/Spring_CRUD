클라이언트 서버 모델(client-server model)은 서비스 요청자인 클라이언트와 서비스 자원의 제공자인 서버간에 작업을 분리해주는 분산 애플리케이션 구조이자 네트워크 아키텍처를 나타낸다.

웹시스템도 확장된 '클라이언트 서버 시스템'으로 분류되나, 일반적으로는 클라이언트 서버 시스템이라고 하면 웹 시스템이 나오기 이전의
사용자 PC에는 클라이언트가 설치되어 화면을 처리하고 서버에서는 자료를 처리하는 시스템을 일컫는다.

클라이언트-서버 구조
클라이언트(client)는 서비스는 사용하는 사용자 혹은 사용자의 단말기를 가리키는 말이다.

서버(Server)란 서비스를 제공하는 컴퓨터이며, 다수의 클라이언트를 위해 존재하기 때문에 일반적으로 매우 큰용량과 성능을 가지고 있었다.
그러나 웹2.0에서는 클라이언트이자 동시에 서버인 환경이 많아지면서 변화가 일어나고 있다.

클라이언트-서버 구조로 된 네트워크 프로그램을 작성하거나, 특정 시스템이 클라이언트-서버 구조로 만들어져 있다는 것은 
클라이언트와 서버가 각자의 역할에 맞게 구성됨을 말한다.
대표적인 예로는
월드 와이드 웹(WWW)가 있다.
웹사이트에서는 웹 서버(IIS)와 Apache가 서버 역할을 하고
사용자가 쓰는 웹 브라우저(파이어폭스, chrome,IE)가 클라이언트 프로그램이 된다.

그러나, 그래는 네트워크 응용 프로그램들의 기능이 고도화 되어 클라이언트이면서 동시에 서버이거나, 그역인 예도 종종 볼 수 있다.

또한 X윈도 시스템도 클라이언트-서버 구조의 한 예이다. 클라이언트는 서버와 동일한 컴퓨터에 존재할 수 도 있고 네트워크를 통하여 서버와 연결되어 있을 수도 있다.
그러므로 원격지에서도 X 응용 프로그램을 쉽게 불러올 수 있다.

클라이어트 서버 컴퓨팅

클라이언트인 테스트톱 컴퓨터나 노트북 컴퓨터는 네트워크를 통해 클라이언트 컴퓨터에 다양한 서비스 및 기능을 제공하는 서버와 연결된다. 이처럼 클라이언트/서버 컴퓨터 간 컴퓨터의 처리 작업은
서로 분리되었다. 클라이어트가 사용자 입력에 초점을 맞춘 반면, 서버 공유 데이터의 처리 및
저장, 웹 페이지 지원, 또는 네트워크 활동 관리 등의 역할을 수행한다.

서버 사이드

서버 사이드란(server-side)란 네트워크의 한 방식인 클라이언트-서버 구조의 서버쪽에서 행해지는 처리를 말한다.
이는 클라이언트에서 프로그램이 구동되는 클라이언트 사이드와는 대조된다.

   HTTP 통신에 있어서 브라우저의 주요 기능 중 하나는 서버에서 HTML 문서를 수신하는 것인데, 브라우저에서 요청한 HTML 문서가 PHP등의 서버 사이트 스크립트 언어를 포함하고 있으면
서버쪽에서 이 부분을 처리하여 결과를 브라우저에 송신하게 된다.

   MMORPG(대규모 다중 사용자 온라인 롤플레잉 게임)에서도 클라이언트-서버 구조가 사용된다. 대부분의 게임에서는 게임 캐릭터 정보와 게임 아이템 정보의 위조를 방지하기 위해 이를 서버 사이드로 처리한다.

장단점

  클라이언트 사이드로 처리할 때와 비교하여 데이터를 서버 사이드로 처리할 경우의 장단점은 다음과 같다.

  장점: 서버 관리자의 입장에서, 데이터 위조의 가능성을 줄일 수 있다. 서버 쪽의 데이터가 확실한 진위이며 클라이언트 쪽에서 위조해서는 안 되는 민감한 데이터의 경우 서버 사이드로 처리해야 한다. 예로 인터넷 뱅킹의 이체 관련 처리나 MMORPG의 게임 아이템 관련 처리에서는 클라이언트 사이드 처리를 최소화해야 한다. 한편 클라이언트 사용자의 입장에서는 클라이언트 컴퓨터의 처리 부담이 줄어든다.

  단점: 서버 관리자의 입장에서, 서버의 처리 부담이 커져 결과적으로 서버 비용이 늘어날 수 있다.

클라이언트 사이드

클라이언트 사이드(client-side)란  네트워크의 한 방식인 클라이언트-서버 구조의 클라이언트 쪽에서 행해지는 처리를 말한다.

   HTTP 통신에 있어서 브라우저의 주요 기능 중 하나는 서버에서 수신한 HTML 문서를 해석하여 화면에 표시해 주는 것인데, HTML 문서가 동적인 부분을 갖고 있지 않다면 문서 수신이 끝나고부터는 서버와 교신하지 않고 브라우저가 클라이언트 사이드에서 처리하여 화면에 내용을 표시한다.

   MMORPG(대규모 다중 사용자 온라인 롤플레잉 게임)에서도 클라이언트-서버 구조가 사용된다. 대부분의 MMORPG는 화려한 그래픽 효과를 사용하는데 이를 위해서는 많은 연산이 필요하며 이러한 연산을 서버 쪽에서 모두 부담할 수 없으므로 그래픽 처리나 소리 처리의 대부분을 클라이언트 사이드로 처리한다.

장단점

서버 사이드로 처리할 때와 비교하여 데이터를 클라이언트 사이드로 처리할 경우의 장단점은 다음과 같다.

장점
   서버 관리자의 입장에서, 서버의 처리 부담을 줄여서 결과적으로 서버 비용을 줄일 수 있다.
처리하는 데이터가 보안에 민감한 경우, 클라이언트 내에서 처리가 가능한 부분에 대해서는 통신에 대비하여 암호화할 필요가 없으므로 암호화 소요가 줄어든다.

단점
  서버 관리자의 입장에서, 클라이언트 사이드에서 처리한 결과를 되받아야 하는 경우, 결과의 진위성을 알기 어렵다. 반대로 말하면 클라이언트 쪽에서 데이터를 위조하기 쉽다. 따라서 서버 쪽의 데이터가 확실한 진위이며 클라이언트 쪽에서 위조해서는 안 되는 민감한 데이터의 경우 서버 사이드로 처리해야 한다. 예로 인터넷 뱅킹의 이체 관련 처리나 위의 MMORPG의 게임 아이템 관련 처리에서는 클라이언트 사이드 처리를 최소화해야 한다.
클라이언트 사용자의 입장에서, 클라이언트 컴퓨터의 처리 부담이 많아진다.