AOP와 트랜잭션

AOP(Aspect-Oriented Programming)는 '관점 지향 프로그래밍'이라는 의미로 번역되는데,
객체지향에서 특정 비즈니스 로직에 걸림돌이 되는 공통 로직을 제거할 수 있는 방법을 제공한다.
AOP를 적용하면 기존의 코드에 첨삭 없이, 메서드의 호출 이전 혹은 이후에 필요한 로직을 수행하는 방법을 제공한다.

트랜잭션 작업은 데이터페이스를 이용할 때 '두 개 이상의 작업이 같이 형향을 받는 경우'에 필요하다.
과거에는 코드 내에 개발자가 직접 이를 지정하고 사용했다면 스프링에서는
XML이나 어노테이션만으로 트랜잭션이 처리된 결과를 만들어 낼 수 있다.

AOP라는 패러다임
AOP는 흔히 '관전 지향 프로그래밍'이라는 용어로 번역되는데, 이때 '관점(Aspect)'이라는 용어가 현실적으로 와닿지 않기 때문에 어렵게 느껴질 수 있다.
'관점'이라는 용어는 개발자들에게는 '관심사'(concern)라는 말로 통용된다.
'관심사'는 개발 시 필요한 고민이나 염두에 두어야 하는 일이라고 생각할 수 있는데, 코드르 ㄹ작성하면서 염두에 두는 일들은 주로 다음과 같다.

- 파라미터가 올바르게 들어왓을까?
- 이 작업을 하는 사용자가 적절한 권한을 가진 사용자인가?
- 이 작업에서 발생할 수 있는 모든 예외는 어떻게 처리해야 하는가?

위와 같은 고민들은 '핵심 로직'은 아니지만, 코드를 온전하게 만들기 위해서 필요한 고민들인데 전통적인 방식에서는 개발자가 반복적으로 이러한 고민을 코드에
반영하게 된다.
AOP는 이러한 고민에 대한 문제를 조금 다른 방식으로 접근한다. AOP가 추구하는 것은 '관심사의 분리(separate concerns)'이다.
AOP는 개발자가 염두에 두어야 하는 일들은 별도의 '관심사'로 분리하고, 핵심 비지니스 로직만을 작성할 것을 권장한다.

'관심사'를 쉽게 생각해보면 약간의 '주변 로직'이라고 표현하고 싶다
예를 들어 나눗셈을 구현한다고 치면 '핵심 로직'은 두 개의 숫자를 나누는 것이지만, '주변 로직'은  0을 나누는 것이 아닌지 등을 체크하는 것이다.
'관심사'는 바로 이런 가장 중요한 로직은 아니지만, 사전 조건이나 사후 조건 등이라고 간주할 수 있다.

AOP는 과거에 개발자가 작성했던 '관심사 + 비즈니스 로직'을 분리해서 별도의 코드로 작성하도록 하고, 
실행할 때 이를 결합하는 방식으로 접근한다.
과거에 비즈니스 로직을 작성하면서 그 내부에 필요한 '관심사'를 처리하던 방식과 정반대의 접근 방식이라고 볼 수 있는데,
개발자가 작성한 코드와 분리된 관심사를 구현한 코드를 컴파일 혹은 실행 시점에 결합시킨다.
실제 실행은 결합된 상태의 코드가 실행되기 때문에 개발자들은 핵심 비즈니스 로직에만 근거해서 코드를 작성하고, 나머지는 어떤 관심사들과 결합할 것인지를 
설정하는 것 만으로 모든 개발를 마칠 수 있게 된다.

예를 들어 AOP를 이용하면 작성된 모든 메서드의 실행 시간이 얼마인지를 기록하는 기능을 기존 코드의 수정 없이도 작성할 수 있고, 
잘못된 파라미터가 들어와서 예외가 발생하는 상황을 기존 코드의 수정 없이도 제어할 수 있다.
스프링이 AOP를 지원한다는 것이 스프링의 가장 중요한 특징 중에 하나로 말하게 된 이유 역시 별도의 복잡한 설정이나 제약 없이
스프링 내에서 간편하게 AOP의 기능을 구현할 수 있기 때문이다.

AOP 용어들 
AOP는 기존의 코드를 수정하지 않고, 원하는 기능들과 결합할 수 있는 패러다임이다.

- Target
- Aspect(관심사 자체를 표현 조금 추상적이 개념)
- Advice(Aspect를 구현한 코드)
- Proxy(대리, 대리권)
- JoinPoint(합류점)
- PointCut

※ AOP를 알려면 Proxy Pattern에 대해서 알아야 한다.
AOP를 구현하기 위해 Dynamic Proxy와 CGLib, AspectJ를 쓸 수 있음을 알았다.
인터페이스 유무에 따라 Spring AOP에서는 인터페이스 기반의 프록시 생성 시 DynamicProxy를 사용하고 인터페이스 기반이 아닐시 CGLib을 사용한다.

Dynamic proxy와 CGLib은 모두 런타임 위빙 방식이며 프록시 패턴으로 동작한다.
따라서 메서드 실행 시에만 위빙(짜집기)이 가능하다. 그래서 스프링 AOP도 메서드 실행 조인포인트만 지원한다.

ProxyPattern이란 
소프트웨어 디자인 패턴 중 하나로 오리지널 객체(Real Object) 대신 프록시 객체(Proxy Object)를 사용해 로직의 흐름을 제어하는 디자인 패턴

Dynamic Proxy와 CGLib는 기본적으로 프록시 패턴으로 동작하여 원래 소스코드를 수정하지 않고 
프록시 객체를 생성하여 흐름을 제어해 기능을 삽입할 수 있다.
오리지널 객체의 메서드 호출 결과를 바꿀 순 없다.


개발자의 입장에서 AOP를 적용한다는 것은 기존의 코드를 수정하지 않고도 원하는 관심사(cross-concern)들을 엮을 수 있다는 점이다.

Target :
  개발자가 작성한 핵심 비즈니스 로직을 가진 객체로 순수한 비즈니스 로직을 의미하고, 어떠한 관심사들과도 관계를 맺지 않는다.
  순수한 코어(Core)라고 볼 수 있다.

Proxy(Target, advice,joinPoint 등 전체를 감싸는 존재 같은거) :
  Proxy는 내부적으로 Target을 호출하지만, 중간에 필요한 관심사들을 거쳐서 Target을 호출하도록 자동 or 수동으로 작성된다.
  proxy의 존재는 직접 고드를 통해서 구현하는 경우도 있지만, 대부분의 경우 스프링 AOP 기능을 이용해서 자동으로 생성되는(auto-proxy) 방식을 이용한다.

JoinPoint :
  Target 객체가 가진 메서드이다. 외부에서의 호출은 Proxy 객체를 통해서 Target 객체의 JoinPoint를 호출하는 방식이라고 이해할 수 있다.
   JoinPoint는 Target이 가진 여러 메서드라고 보면 된다.(엄밀하게 스프링 AOP에서는 메서드만이 JoinPoint가 된다.)
 
PointCut:
  Target에서는 여러 메서드가 존재하기 때문에 어던 메서드에 관심사를 결합할 것인지를 결정해야 하는데 이 결정을 PointCut이라고 한다.
  PointCut은 관심사와 비즈니스 로직이 결합되는 지점을 결정하는 것이다.
   앞의 Proxy는 이 결합이 완성된 상태이므로 메서드를 호출하게 되면 자동으로 관심사가 결합된 상태로 동작하게 된다.

Advice: 실제 걱정거리를 분리해 놓은 코드를 의미한다. Advice는 그 동작 위치에 따라 다음과 같이 구분된다.

- Before Advice : Target의 JoinPoint를 호출하기 전에 실행되는 코드이다. 코드의 실행자체에는 관여할 수 없다.

- After Returning Advice : 모든 실행이 정상적으로 이루어진 후에 동작하는 코드

- After Throwing Advice : 예외가 발생한 뒤에 동작하는 코드이다.

- After Advice : 정상적으로 실행되거나 예외가 발생했을 때 구분 없이 실행되는 코드이다.

- Around Advice : 메서드의 실행 자체를 제어할 수 있는 가장 강력한 코드이다. 직접 대상 메서드를 호출하고 결과나 예외를 처리할 수 있다.

Advice는 과거의 스프링에서는 별도의 인터페이스로 구현되고, 이를 클래스로 구현하는 방식으로 제작했으나
스프링 3번전 이후에는 어노테이션만으로도 모든 설정이 가능하다.
Target에 어떤 Advice를 적용할 것인지는 XML을 이용한 설정을 이용할 수 있고, 어노테이션을 이용하는 방식을 이용할 수 있다.

PointCut은 Advice를 어떤 JoinPoint에 결합할 것인지를 결정하는 설정이다. 
AOP에서 Target은 결과적으로 PointCut에 의해서 자신에게는 없는 기능들을 가지게 된다. PointCut은 다양한 형태로 선언해서 사용할 수 있는데 주로 사용되는 설정은 다음과 같다

- execution(@execution) 메서드를 기준으로 PointCut을 설정한다.
- within(@within) 특정한 타입(클래스)를 기준으로 PointCut을 설정한다.
- this 주어진 인터페이스를 구현한 객체를 대상으로 PointCut을 설정한다.
- args(@args) 특정한 파라미터를 가지는 대상들만을 PointCut으로 설정한다.
- @ennotation 특정한 어노테이션이 적용된 대상들만을 PointCut으로 설정한다.


AOP 실습
AOP 기능은 주로 일반적인 Java API를 이용하는 클래스(POJO-Plain Old Java Object)들에 적용한다.
Controller에 적용이 불가능한 것은 아니지만, Controller의 경우 뒤에서 학습하게 될 인터셉터나 필터 등을 이용한다.
예제에서는 서비스 계층에 AOP를 적용한다.
1) 서비스 계층의 메서드 호출 시 모든 파라미터들을 로그로 기록한다.
(핵심 비즈니스 로직에서 부가적인 기능들을 따로 빼서 활용한게 핵심)

2) 메서드들의 실행 시간을 기록하도록 한다.
(관심사등 분리)

예제 프로젝트 생성
AOP를 실습하기 위해서 예제 프로젝트를 하나 생성한다. 예제는 'ex04'로 생성하고 기본 패키지는 'org.zerock.controller'를 이용

예제 프로젝트는 스프링 5.0.7버전을 이용하고 pom.xml에 스프링 버전과 AOP 버전을 수정한다.

예제) pom.xml 자바, 스프링 버전 수정
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.0.7.RELEASE</org.springframework-version>
		<org.aspectj-version>1.9.0</org.aspectj-version>
		<org.slf4j-version>1.7.25</org.slf4j-version>
	</properties>

스프링의 AOP는 AspectJ라는 라이브러리의 도움을 많이 받기 떄문에 스프링 버전을 고려해서 AspectJ의 버전 역시 1.9.0으로 버전을 높여 준다.
프로젝트는 최종적으로 테스트 코드를 통해서 동작하게 될 것이므로 spring-test, lombok을 추가하고, Junit의 버전을 변경한다.

예제) pom.xml AspectJ test 라리브러리 추가
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
	
		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.0</version>
		    <scope>provided</scope>
		</dependency>
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>        
		

AOP 설정과 관련해서 가장 중요한 라이브러리는 AspectJ Weaver라는 라이브러리이다.
스프링은 AOP 처리가 된 객체를 생성할 때 AspectJ Weaver 라이브러리의 도움을 받아서 동작하므로, pom.xml에 추가해야한다.

예제) Pom.xml AspectJ Weaver lib 추가
		<!-- part5 추가 -->
		<!-- AOP 설정과 관련해서 가장 중요한 라이브러리는 AspectJ Weaver 라이브러리다.
		스프링은 AOP 처리가 된 객체를 생성할 때 AspectJ Weaver lib의 도움을 받아서 동작하므로 
		aspectjrt와 aspectJ Weaver를 추가해주고 aspectj-version과 동일한 버전으로 맞춰준다. -->
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjrt</artifactId>
		    <version>${org.aspectj-version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjweaver</artifactId>
		    <version>${org.aspectj-version}</version>		   
		</dependency>


서비스 계층 설계

프로젝트에 org.zerock.service 패키지를 생성하고 간단한 기능을 가진 서브시 인터페이스와 구현 클래스를 생성

예제) SampleService 인터페이스 생성

package org.zerock.service;

public interface SampleService {

	public Integer doAdd(String str1, String str2)throws Exception;
	
}

예제로 사용할 객체는 SampleService 인터페이스의 doAdd() 메서드를 대상으로 진행한다.
인터페이스를 구현한 SampleServiceImpl 클래스는 단순히 문자열을 변환해서 더하기 연산을 하는 단순 작업으로 작성한다.
SampleServiceImpl을 작성할 때에는 반드시 @Service라는 어노테이션을 추가해서 스프링에서 빈으로 사용될 수 있도록 설정한다.

예제) SampleServiceImpl SampleService 구현 클래스 생성

package org.zerock.service;

import org.springframework.stereotype.Service;

@Service
public class SampleServiceImpl implements SampleService {

	@Override
	public Integer doAdd(String str1, String str2) throws Exception {
		
		return Integer.parseInt(str1) + Integer.parseInt(str2);
	}

	
}


Advice 작성
위의 SampleServiceImpl 코드를 보면 기존에는 코드를 작성할 때 항상 log.info()등을 이용해서 로그를 기록해 오던 부분이 빠진 것을 볼 수 있다.
지금까지 해왓던 수많은 로그를 기록한는 일은 '반복적이면서 핵심 로직도 아니고, 필요하기는 한' 기능이기 때문에 '관심사'로 간주할 수 있다.
AOP의 개념에서 Advice는 '관심사'를 실제로 구현한 코드이므로 지금부터 로그를 기록해주는 LogAdvice를 설계한다.

AOP 기능의 설정은 XML 방식이 있기는 하지만, 이 책의 예제는 어노테이션만을 이용해서 AOP 관련 설정을 진행한다. 
예제 프로젝트에 org.zerock.aop패키지를 생성하고, LogAdvice라는 클래스를 추가한다.

예제) LogAdvice 생성

package org.zerock.aop;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

import lombok.extern.log4j.Log4j;
// AOP 기능의 설정은 XML 방식도 있지만 어노테이션 만으로 AOP 관련 설정을 진행한다.
@Aspect
@Log4j
@Component
public class LogAdvice {

	@Before( "execution(* org.zerock.service.SampleService*.*(..))")
	public void logBefore() {
		
		log.info("===============================");
	}
}

LogAdivce 클래스의 선언부에는 @Aspect 어노테이션이 추가되어 있다.
@Aspect는 해당 클래스의 객체가 Aspect를 구현한 것임으로 나타내기 위해서 사용한다.
@Component는 AOP와는 관계가 없지만 스프링에서 빈(bean)으로 인식하기 위해서 사용한다.
logBefore()는 @Before어노테이션을 적용하고 있다. @Before느 BeforeAdivce를 구현한 메서드에 추가한다. 
@After, @AfterReturning, @AfterThrowing, @Around 역시 동일한 방식으로 적용한다.

Adivce와 관련된 어노테이션들은 내부적으로 PointCut을 지정한다.
PointCut은 별도의 @PointCut으로 지정해서 사용할 수도 있다. @Before내부의 'execution....' 문자열은 AspectJ의 표현식(expression)dlek.
'execution'의 경우 접근제한자와 특정 클래스의 메서드를 지정할 수 있다. 맨 앞의 '*'는 접근제한자를 의미하고, 맨 뒤의 '*'는 클래스의 이름과 메서드의 이름을 의미한다.

AOP 설정
스프링 프로젝트에 AOP를 설정하는 것은 스프링 2버전 이후에는 간단히 자동으로 Proxy 객체를 만들어주는 설정을 추가해 주면 된다.

프로젝트의 root-context.xml을 선택해서 namespace에 'aop'와 'context'를 추가한다.

예제) root-context.xml 추가

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<context:annotation-config></context:annotation-config>
		
		<context:component-scan base-package="org.zerock.service"></context:component-scan>
		<context:component-scan base-package="org.zerock.aop"></context:component-scan>
		
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
</beans>

root-context.xml에서는 <component-scan>을 이용해서 'org.zerock.service' 패키지와 'org.zerock.aop'패키지를 스캔한다.
이 과정에서 SampleServiceImpl 클래스와 LogAdivce는 스프링의 빈(객체)으로 등록될 것이고, 
<aop:aspectJ-autoproxy>를 이용해서 LogAdvice에 설정한 @Before가 동작하게 된다.

AOP테스트

정상적인 상황이라면 SampleServiceImpl, LogAdvice는 같이 묶여서 자동으로 proxy 객체가 생성된다.
테스트 관련 폴더에 org.zerock.service.sampleServiceTests 클래스를 추가한다.

예제) SampleServiceTests 클래스 생성(Junit4이용)
package org.zerock.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@Log4j
@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml"})
// Java설정의 경우
//@ContextConfiguration(classes = {RootConnfig.class})
public class SampleServiceTests {

	@Setter(onMethod_ = @Autowired)
	private SampleService service;
	
	@Test
	public void testClass() {
		
		log.info(service);
		log.info(service.getClass().getName());
	}
	
}

SampleServiceTests에서 가장 먼저 작성해 봐야하는 코드는 AOP 설정을 한 Target에 대해서 Proxy 객체가 정상적으로 만들어져 있는지를 확인하는 것이다.
<aop:aspectJ-autoproxy>가 정상적으로 모든 동작을 하고, LogAdvice에 설정 문제가 없다면 service 변수의 클래스는 단순히
org.zerock.service.SampleServiceImpl의 인스턴스가 아닌 생성된 Proxy클래스의 인스턴스가 된다.
testClass()를 실행해 보면 다음과 같은 결과를 보게된다.

INFO : org.zerock.service.SampleServiceTests - org.zerock.service.SampleServiceImpl@64bce832
INFO : org.zerock.service.SampleServiceTests - com.sun.proxy.$Proxy22

단순히 service 변수를 출력했을 때는 기존에 사용하듯이 SampleServiceImpl 클래스의 인스턴스터처럼 보인다.
이것은 toString()의 결과이므로 좀 더 세밀하게 파악하려면 getClass()를 이용해서 파악해야만한다. 
com.sun.proxy.$Proxy는 JDK의 다이나믹프록시(dynamic Proxy) 기법이 적용된 결과이다.
이를 이용해서 SampleServiceImpl에 있는 코드를 실행하는 테스트 코드를 작성한다.

예제) sampleServiceTests testAdd() 메서드 추가
	@Test
	public void testAdd() throws Exception{
		
		log.info(service.doAdd("123", "456"));
	}

SampeServiceImpl의 doAdd()를 실행하면 LogAdvice의 설정이 같이 적용되어 아래와 같이 로그가 기록되어야한다.
INFO : org.zerock.aop.LogAdvice - ===============================
INFO : org.zerock.service.SampleServiceTests - 579

args를 이용한 파라미터  추적 LogAdvice가 SampleService의 Add()를 실행하기 직전에 간단한 로그를 기록하지만, 상황에 따라서는 해당 메서드에 전달되는 파라미터가 무엇인지 기록하거나,
예외가 발생했을 때 어떤 파라미터에 문제가 있는지 알고 싶은 경우도 많다.

LogAdvice에 적용된 @Before("execution(*org.zerock.service.SampleService*.*(..))")은 어떤 위치에 Adivce를 적용할 것인지를 결정하는 PointCut인데, 설정 시에 args를 이용하면 
간단히 파라미터를 구할 수 있다.

예제) LogAdvice 추가

	@Before( "execution(* org.zerock.service.SampleService*.doAdd(String,String)) && "
			+ "args(str1, str2)")
	public void logBeforeWithParam(String str1, String str2) {
		
		log.info("str1: " + str1);
		log.info("str2: " + str2);
	}

LogBeforeWithParam()에서는 'execution'으로 시작하는 PointCut 설정에 doAdd()메서드를 명시하고, 파라미터의 타입을 지정했다.
뒤쪽의 '&& args(...' 부분에는 변수명을 지정하는데, 이 2종료의 정보를 이용해서 logBeforeWithParam() 메서드의 파라미터를 설정하게 되나.

기존의 테스트 코드를 실행하면 이제 단순한 고르와 더불어 전달된 파라미터 역시 파악할 수 있다.

INFO : org.zerock.aop.LogAdvice - ===============================
INFO : org.zerock.aop.LogAdvice - str1: 123
INFO : org.zerock.aop.LogAdvice - str2: 456
INFO : org.zerock.service.SampleServiceTests - 579

'&& args'를 이용하는 설정은 간단히 파라미터를 찾아서 기록할 때에는 유용하지만 파라미터가 다른 여러 종류의 메서드에 적용하는 데에는 간단하지 않는 단점이 있다.
이에 대한 문제는 조금 뒤쪽에서 @Around와 ProceedingJoinPoint를 이용해서 해결할 수 있다.

@AfterThrowing
코드를 실행하다 보면 파라미터의 값이 잘못되어서 예외가 발생하는 경우가 많습니다.
AOP의 @AfterThrowing 어노테이션은 지정된 대상이 예외를 발생한 후에 동작하면서 문제를 찾을 수 있도록 도와준다.

예제) LogAdivce에 @AfterThrowing 추가

	@AfterThrowing(pointcut = "execution(* org.zerock.service.SampleService*.*(..))"
			, throwing = "exception")
	public void logException(Exception exception) {
		
		log.info("Exception...!!!!!!!!");
		log.info("Exception: " + exception);
	}


logException()에 적용된 @AfterThrowing은 'pointcu'과 'throwing'속성을 지정하고 변수 이름을 'exception'으로 지정한다.
테스트 코드에는 고의적으로 예외가 발생할만한 코드를 작성해서 테스트한다.

예제) SampleServiceTests에 testAddError() 메서드 추가
	@Test
	public void testAddError() throws Exception{
		
		log.info(service.doAdd("123", "ABC"));
	}

doAdd()는 숫자로 변환이 가능한 문자열을 파라미터로 지정해야 하는데 고의적으로 'ABC'와 같은 문자를 전달하면 다음과 같은 로그를 보게 된다.INFO : org.zerock.aop.LogAdvice - ===============================
INFO : org.zerock.aop.LogAdvice - str1: 123
INFO : org.zerock.aop.LogAdvice - str2: ABC
INFO : org.zerock.aop.LogAdvice - Exception...!!!!!!!!	
INFO : org.zerock.aop.LogAdvice - Exception: java.lang.NumberFormatException: For input string: "ABC"

@Around와 ProceedingJoinPoint
AOP를 처음 적용해 보았다면 '뭔지 모르게 신기한 일'이 생겼다는 느낌을 가지게 된다.
코드를 작성하지 않았는데 다른 코드와 같이 결합되어서 동작하기 때문에 지금까지 코드를 작성했던 것과는 완전히 다른 방식으로 코드를 작성하기 때문이다.
AOP를 이용해서 좀 더 구체적인 처리를 하고 싶다면 @Around와 ProceedingJoinPoint를 이용해야 한다.
@Around는 조금 특별하게 동작하는데 직접 대상 메서드를 실행할 수 있는 권한을 가지고 있고, 메서드의 실행 전과 실행 후에 처리가 가능하다.

ProceedingJoinPoint는 @Around와 같이 결합해서 파라미터나 예외 등을 처리할 수 있다.

예제) LogAdvice @Around와 ProceedingJoinPoint

	// Around가 적용될 포인트 컷을 명시 : @Around("execution(* org.zerock.service.SampleService*.*(..))")
	@Around("execution(* org.zerock.service.SampleService*.*(..))")
	public Object logTime( ProceedingJoinPoint pjp) {
		
		long start = System.currentTimeMillis(); // 시스템의 현재 시간 초
		
		log.info("Target: " + pjp.getTarget());
		log.info("Param: " + Arrays.toString(pjp.getArgs()));
		
		// invoke method
		Object result = null;
		
		try {
			result = pjp.proceed();
		} catch (Throwable e) {
			// TODO: Auto-generated catch block
			e.printStackTrace();
		}
		
		long end = System.currentTimeMillis();

		
		log.info("TIME : " + (end - start));
		
		return result;
	}

logTime()의 Pointcut 설정은 '...SampleService*.*(..)'로 지정한다.
logTime()은 특별하게 ProceedingJoinPoint라는 파라미터를 지정하는데, ProceedingJoinPoint는 AOP의 대상이 되는 Target이나 파라미터 등을 파악할 뿐만 아니라,
직접 실행을 결정할 수도 있다. 
@Before 등과 달리 @Around가 적용되는 메서드의 경우에는 리턴 타입이 void가 아닌 타입으로 설정하고, 메서드의 실행 결과 역시 직접 반환하는 형태로 작성해야만 한다.

정상적으로 동작하는 테스트 코드는 실행해 보면 다음과 같은 결과를 볼 수 있다.

INFO : org.zerock.aop.LogAdvice - Target: org.zerock.service.SampleServiceImpl@64bce832
INFO : org.zerock.aop.LogAdvice - Param: [123, 456]
INFO : org.zerock.aop.LogAdvice - ===============================
INFO : org.zerock.aop.LogAdvice - str1: 123
INFO : org.zerock.aop.LogAdvice - str2: 456
INFO : org.zerock.aop.LogAdvice - TIME : 3
INFO : org.zerock.service.SampleServiceTests - 579

실행 결과를 보면 @Around가 먼저 동작하고, @Before 등이 실행된 후에 메서드가 실행되는데 걸린 시간이 로그로 기록되는 것을 볼 수 있다.


스프링에서 트랜잭션 관리
비즈니스에서는 쪼개질 수 없는 하나의 단위 작업을 말할 때 '트랜잭션(Transaction)'이라는 용어를 사용한다.
사전적인 의미로 트랜잭션은 '거래'라는 뜻을 가지지만, 현실적으로는 '한 번에 이루어지는 작업의 단위'를 트랜잭션으로 간주한다.

트랜잭션의 성격을 'ACID 원칙'으로 설명하곤 하는데 다음과 같다

원자성(Atomicity) :
 하나의 트랜잭션은 모두 하나의 단위로 처리되어야 한다. 좀 더 쉽게 말하자면 어떤 트랜잭션이 A와 B로 구성된다면 항상 A, B의 처리 결과는 동일한 결과이어야 한다.
 즉, A는 성공했지만, B는 실패할 경우 A, B는 원래 상태로 돌려져야만 한다. 어떤 작업이 잘못되는 경우 모든 것은 다시 원점으로 되돌아가야만 한다.

일관성(Consistency) :
 트랜잭션이 성공했다면 데이터베이스의 모든 데이터는 일관성을 유지해야만 한다. 트랜잭션으로 처리된 데이터와 일반 데이터 사이에는 전혀 차이가 없어야만 한다.

격리(Isolation) :
 트랜잭션으로 처리되는 중간에 외부에서의 간섭은 없어야만 한다.

영속성(Durability) :
 트랜잭션이 성공적으로 처리되면, 그 결과는 영속적으로 보관되어야 한다.

트랜잭션에 가장 흔한 예제는 '계좌 이체' 이다. 
'계좌 이체'라는 행위가 내부적으로는 하나의 계좌에서는 출금이 이루어져야 하고, 이체의 대상 계좌에서는 입금이 이루어져야만 한다.
'계좌 이체'는 엄밀하게 따져보면 '출금'과 '입금'이라는 각각의 거래가 하나의 단위를 이루게 되는 상황이다.

비즈니스에서 하나의 트랜잭션은 데이터베이스 상에서 하나 혹은 여러 개의 작업이 같은 묶을을 이루는 경우가 많다.
예를 들어 비즈니스 계층에서 '계좌 이체'는 bankTransfer()라는 메서드로 정의되고, 계좌 내에 입금과 출금은 deposit()(입금), withdraw()(출금)이라는 메서드로 정의된다고 가정하자

deposit()과 withdraw()는 각자 고유하게 데이터베이스와 커넥션을 맺고 작업을 처리한다.
문제는 withdraw()는 정상적으로 처리되었는데, deposit()에서 예외가 발생하는 경우이다.
이미 하나의 계좌에서는 돈이 빠져나갔지만, 상대방의 계좌에는 돈이 입금되지 않은 상황이 될 수 있다.

'트랜잭션으로 관리한다.' 혹은 '트랜잭션으로 묶는다'는 표현은 프로그래밍에서는 'AND'연산과 유사하다.

영속 계층에서 withdraw()와 deposit()은 각각 데이터베이스와 연결을 맺고 처리하는데 하나의 트랜잭션으로 처리해야할 경우에는 한쪽이 잘못되는 경우에 이미 성공한 작업까지
다시 원상태로 복구되어야 한다.
별도의 패턴이나 프레임워크를 사용하지 않는 순수하게 JDBC를 이용하는 코드라면 withdraw()와 deposit()의 내부는 아래와 같이 Connection을 맺고 처리하도록 작성될 것이다.
(아래 코드에서 각 메서드마다 Connection을 맺고 있는 점을 주목해라)

public boolean deposit(){			public boolean withdraw(){

 Connection con = ..				  Connection con = ..

 try{						  try{
  con = ...					  con = ...

}catch(Exception e) {				}catch(Exception e){

}finally {					}finally {
 try {con.close();}				  try {con.close();}
 }						 }
}						}


withdraw()와 deposit()이 위와 같이 고유하게 연결을 맺고 처리되는 구조라면 backTransfer()를 작성할 때는 어느 한쪽이 실패할 때를 염두에 두는 코드를 복잡하게 만들어야 한다.
스프링은 이러한 트랜잭션 처리를 간단히 XML 설정을 이용하거나, 어노테이션 처리만으로 할 수 있다.

데이터베이스 설계와 트랜잭션
데이터베이스의 저장 구조를 효율적으로 관리하기 위해서 흔히 '정규화'라는 작업을 한다.
'정규화'의 가장 기본은 '중복된 데이터를 제거'해서 데이터 저장의 효율을 올리자는 것이다.
정규화를 진행하면
1) 테이블은 늘어나고
2) 각 테이블의 데이터 양은 줄어드는 것이 일반적이다.

정규화를 진행하면서 원칙적으로 칼럼으로 처리되지 않는 데이터는 다음과 같다.

- 시간이 흐르면 변경되는 데이터를 칼럼으로 기록하지 않는다. - 대표적으로 사용자의 생년월일의 경우 칼럼에 기록하지만, 현재 나이는 칼럼으로 유지하지 않는다.
  (만일 나이에 대한 연산이 너무 빈번한 경우에는 칼럼으로 설정할 가능성도 있긴 하다.)

- 계산이 가능한 데이터를 칼럼으로 기록하지 않는다. - 주문과 주문 상세가 별도의 테이블로 분리되어 있다면 사용자가 한 번에 몇 개의 상품을 주문햇는지 등은 칼럼으로 기록하지 않는다.
  (집합 연산이 성능에 형향을 주는 경우에만 칼럼으로 고려한다.)

- 누구에게나 정해진 값을 이용하는 경우 데이터베이스에서 취급하지 않는다. - 예를 들어 2018년 1월 1일은 '월요일'이엇고 , 이 사실은 동일한 시간대를 사용하는 모든 사람들에게는 통용되기
   때문에 데이터베이스에 기록하지 않는다.

정규화가 잘 되었거나, 위와 같은 규칙들이 반영된 데이터베이스의 설계에서는 '트랜잭션'이 많이 일어나지는 않는다.
정규화가 진행될수록 테이블은 점점  더 순수한 형태가 되어가는데, 순수한 형태가 될수록 '트랜잭션 처리'의 대상에서 멀어진다.
정규화를 진행할수록 테이블은 더욱 간결해지지만 반대로 쿼리 등을 이용해서 필요한 데이터를 가져오는 입장에서는 점점 불편해 진다.
현재 상황을 알기 위해서는 단순히 조회를 하는 것이 아니라 직접 조인(join)이나 서브쿼리(subQuery)를 이용해서 처리해야한다.

조인이나 서브쿼리를 이용하게 되면 다시 성능의 이슈가 발생할 수 있다. 매번 계산이 발생하도록 만들어지는 쿼리의 경우 성능이 저하되기 때문에 많은 양의 데이터를 처리해야 하는
상황에서는 바람직하지 않을 수 있다. 이러한 상황에서는 흔히 '반정규화'(혹은 역정규화)를 하게 된다.
정규화의 반대이므로 중복이나 계산되는 값을 데이터베이스 상에 보관하고, 대신에 조인이나 서브쿼리의 사용을 줄이는 방식이다.

반정규화의 가장 흔한 예가 '게시물의 댓글'의 경우이다.

정규화를 했다면 tbl_board 테이블에는 게시물에 대한 정보들만으로 칼럼이 구성되어야 하고, tbl_reply 테이블을 이용해서 댓글들을 보관하게 된다.
문제는 게시물의 목록 페이지에서 일반적으로 댓글의 숫자도 같이 표시된다는 데 있다.
댓글을 추가한 뒤에 댓글의 숫자를 표시하려면 조인을 하거나 서브쿼리를 이용해서 처리하게 된다.
이러한 상황에서는 흔히 tbl_board 테이블에 댓글의 숫자를 칼럼으로 처리하는 경우가 많다.
댓글의 숫자를 칼럼으로 처리하게 되면 게시물의 목록을 가져올 경우에는 tbl_reply 테이블을 이용해야 하는 일이 없기 때문에 성능상으로 좀 더 이득을 볼 수 있게 된다.

반정규화는 이처럼 중복이나 계산의 결과를 미리 보관해서 좀 더 빠른 결과를 얻기 위한 노력이다. 반정규화를 하게 되면 쿼리가 단순해지고 성능상으로도 얻을 수 있는 이득이 있지만,
대신에 댓글이 추가될 때에는 댓글을 의미하는 tbl_reply 테이블에 insert하고, 댓글의 숫자는 tbl_board 테이블에 update를 시켜주는 작업이 필요하다.
두 작업은 하나의 트랜잭셔으로 관리되어야 하는 작업이다.

트랜잭션 설정 실습
스프링의 트랜잭션 설정은 AOP와 같이 XMl을 이용해서 설정하거나 어노테이션을 이용해서 설정이 가능하다.
우선 스프링의 트랜잭션을 이용하기 위해서는 TransactionManager라는 존재가 필요하다

pom.xml에는 spring-jdbc, spring-tx 라이브러리를 추가하고, mybatis, mybatis-spring, hikari 등의 라이브러리를 추가한다.

예제) pom.xml 라이브러리 추가

	<!-- 스프링 관련된 라이브러리 spring-tx, spring-jdbc, spring-test 추가 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		<!-- mybatis관련 라이브러리 HikariCP, Mybatis, mybatis-spring, Log4jdbc -->
		<!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
		<dependency>
		    <groupId>com.zaxxer</groupId>
		    <artifactId>HikariCP</artifactId>
		    <version>2.7.4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.6</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.2</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
		<dependency>
		    <groupId>org.bgee.log4jdbc-log4j2</groupId>
		    <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
		    <version>1.16</version>
		</dependency>

root-context.xml에서는 Namespace 탭에서 tx, aop, beans, context, mybatis-spring항목을 체크한다.
root-context.xml에는 트랜잭션을 관리하는 빈(객체)을 등록하고, 어노테이션 기반으로 트랜잭션을 설정할 수 있도록 <tx:annotaion-driven> 태그를 등록한다.

예제) root-context.xml 추가

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<!-- 
		<property name="driverClassName" value = "oracle.jdbc.driver.OracleDriver"></property>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl"></property>
	-->
		<property name="driverClassName" value ="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:orcl"></property>
		<property name="username" value="book_ex"></property>
		<property name="password" value="book_ex"></property>
		
	</bean>
	
	
	<!-- HicariCp configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
		
	<tx:annotation-driven/>
	
	<mybatis-spring:scan base-package="org.zerock.mapper" />
		<context:component-scan base-package="org.zerock.service"></context:component-scan>
		<context:component-scan base-package="org.zerock.aop"></context:component-scan>
		
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
</beans>



예제 테이블 생성 
트랜잭션의 실습은 간단히 2개의 테이블을 생성하고, 한 번에 두 개의 테이블에 insert해야 하는 상황을 재현하도록 한다.

예제) 예제 사용할 테이블 2개 생성
create table tbl_sample1( col1 varchar2(500));
create table tbl_sample2( col2 varchar2(50));

tbl_sample1 테이블의 col1의 경우는 varchar2(500)으로 설정된 반면에 
tbl_sample2 테이블의 col2의 경우는 varchar2(50)으로 설정되었다.
만일 50바이트 이상의 데이터를 넣는 상황이라면 tbl_sample1에는 정상적으로 insert 되지만, tbl_sample2에는 insert 시 칼럼의 최대 길이보다 크기 때문에 문제가 있게 된다.

예제) org.zerock.mapper 패키지에 Sample1Mapper 인터페이스 생성
package org.zerock.mapper;

import org.apache.ibatis.annotations.Insert;

public interface Sample1Mapper {
	
	@Insert("insert into tbl_sample1(col1) values (#{data})")
	public int insertCol1(String data);
}

예제) Sample2Mapper 인터페이스 생성
package org.zerock.mapper;

import org.apache.ibatis.annotations.Insert;

public interface Sample2Mapper {

	@Insert("insert into tbl_sample2 (col2) values (#{data})")
	public int insertCol2(String data);
}

Sample1Mapper는 tbl_sample1 테이블에, Sample2Mapper는 tbl_sample2 테이블에 데이터를 insert 하게 작성한다.

비즈니스 계층과 트랜잭션 설정
트랜잭션은 비즈니스 계층에서 이루어지므로, org.zerock.service 계층에서 Sample1Mapper, Sample2Mapper를 사용하는 SampleTxService 인터페이스, SampleTxServiceImpl 클래스를 설계

트랜잭션의 설정이 안되어 있는 상태를 먼저 테스트하기 위해서 기존 방식처럼 코드를 작성한다.

예제) org.zerock.service 패키지에 SampleTxService 인터페이스 생성
package org.zerock.service;

public interface SampleTxService {

	public void addData(String value);
}

예제) SampleTxServiceImpl 구현 클래스생성

package org.zerock.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.zerock.mapper.Sample1Mapper;
import org.zerock.mapper.Sample2Mapper;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@Log4j
@Service
public class SampleTxServiceImpl implements SampleTxService{
	
	@Setter(onMethod_ = @Autowired)
	private Sample1Mapper mapper1;
	
	@Setter(onMethod_ = @Autowired)
	private Sample2Mapper mapper2;
	
	@Override
	public void addData(String value) {
		
		log.info("mapper1...............");
		mapper1.insertCol1(value);
		
		log.info("mapper1...............");
		mapper2.insertCol2(value);
		
		log.info("end...............");
		
	}
	
}


SampleTxService는 addData()라는 메서드를 통해서 데이터를 추가한다.
SampleTxServiceImpl 클래스는 Sample1Maper와 Sample2Mapper 모두를 이용해서 같은 데이터를 tbl_sample과 tbl_sample2테이블에 insert 하도록 작성한다.

예제) src/test/java/org/zerock/service에 SampleTxServiceTests 클래스 작성

package org.zerock.service;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@Log4j
@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml"})
public class SampleTxServiceTests {

	@Setter(onMethod_ = @Autowired)
	private SampleTxService service;
	
	@Test
	public void testLong() {
		
		String str = "Starry\r\n" + 
				"Starry night\r\n"+
				"Paint your palette blue and grey\r\n" + 
				"Look out on a summer's day";
		
		log.info(str.getBytes().length);
		
		service.addData(str);
	}

}

testLong()은 50bytes가 넘고 500bytes를 넘지 않는 길이의 어떤 문자열을 이용해서 tbl_sample1, tbl_sampl2 테이블에 insert를 시도한다.
testLong()을 실행하면 tbl_sample1에는 데이터가 추가되지만, tbl_sample2에는 길이의 제한으로 인해서 insert가 실패하게 된다.
테스트 코드를 실행했을 때에는 아래와 같은 결과를 보게 된다.

INFO : org.zerock.service.SampleTxServiceTests - 82
INFO : org.zerock.aop.LogAdvice - Target: org.zerock.service.SampleTxServiceImpl@37cd92d6
INFO : org.zerock.aop.LogAdvice - Param: [Starry
Starry night
Paint your palette blue and grey
Look out on a summer's day]
.. 생략
java.sql.SQLException: ORA-12899: "BOOK_EX"."TBL_SAMPLE2"."COL2" 열에 대한 값이 너무 큼(실제: 82, 최대값: 50)
at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:494)
... 생략....

테스트에 사용한 문자열은 82bytes였으므로 tbl_sample1에는 아래와 같이 정상적으로 insert가 되고, tbl_sample2에는 insert에 실패한다.


@Transactional 어노테이션 ★중요★
위의 결과를 보면 트랜잭션 처리가 되지 않았기 때문에 하나의 테이블에만 insert가 성공한 것을 볼 수 있다.
만일 트랜잭션 처리가 되었다면 tbl_sample1과 tbl_sample2 테이블 모두에 insert가 되지 않았어야 하므로, 트랜잭션 처리가 될 수 있도록
SampleTxServiceImpl의 addData()에 @Transactional을 추가한다.

예제) SampleTxServiceImpl에 @Transactional 어노테이션 추가
	@Transactional
	@Override
	public void addData(String value) {
		
		log.info("mapper1...............");
		mapper1.insertCol1(value);
		
		log.info("mapper1...............");
		mapper2.insertCol2(value);
		
		log.info("end...............");
		
	}

기존의 코드에서 달라지는 부분은 @Transactional 어노테이션이 추가된 것 뿐이다.
이클립스에서 트랜잭션은 AOP와 마찬가지로 아이콘을 통해서 트랜잭션 처리가 된 메서드를 구분해 준다.

정확한 테스트를 위해서 이전에 성공한 tbl_sampl1의 데이터를 삭제하고, commit한다.

delete tbl_sample1;
delete tbl_sample2;
commit;

양쪽 테이블 모든 데이터가 없는 것을 확인한 후에 다시 테스트 코드를 실행한다. 동일한 코드였지만 @Transactional이 추가된 후에는 실행 시 rollback() 되는 것을 확인할 수 있다.
INFO : jdbc.audit - 1. Connection.getMetaData() returned oracle.jdbc.driver.OracleDatabaseMetaData@6594402a
INFO : jdbc.audit - 1. Connection.commit() returned 
INFO : jdbc.audit - 1. Connection.setAutoCommit(true) returned 
INFO : jdbc.audit - 1. Connection.isReadOnly() returned false
INFO : jdbc.audit - 1. Connection.clearWarnings() returned 

데이터베이스에서도 tbl_sample1, tbl_sample2 테이블 모두 아무 데이터가 들어가지 않는 것을 확인할 수 있다.

@Transactional 어노테이션 속성들
스프링에서는 트랜잭션을 처리하기 위해서 제공되는 @Transactional 어노테이션을 이용하면 간단히 트랜잭션 설정을 완료할 수 있다.
이때 지정할 수 있는 속성들은 다음과 같다.

@Transactional 어노테이션은 몇 가지 중요한 속성을 가지고 있으니, 경우에 따라서는 속성들을 조정해서 사용해야 한다.

전파(Propagation) 속성
- PROPAGATION_MADATORY : 작업은 반드시 특정한 트랜잭션이 존재한 상태에서만 가능

- PROPAGATION_NESTED : 기존에 트랜잭션이 있는 경우, 포함되어서 실행

- PROPAGATION_NEVER : 트랜잭션 상황하에 실행되면 예외 발생

- PROPAGATION_NOT_SUPPORTED : 트랜잭션이 있는 경우엔 트랜잭션이 끝날 때까지 보류된 후 실행

- PROPAGATION_REQUIRED : 트랜잭션이 있으면 그 사황에서 실행, 없으면 새로운 트랜잭션 실행(기본설정)

- PROPAGATION_REQUIRED_NEW : 대상은 자신만의 고유한 트랜잭션으로 실행

- PROPAGATION_SUPPORTEDS : 트랜잭션을 필요로 하지 않으나, 트랜잭션 상황하에 있다면 포함되어서 실행

격리(Isolation) 레벨

- DEFAULT : DB 설정, 기본 격리 수준(기본설정)

- SERIALIZABLE : 가장 높은 격리, 성능 저하의 우려가 있음

- READ_UNCOMMITED : 커밋되지 않은 데이터에 대한 읽기를 허용

- READ_COMMITED : 커밋된 데이터에 대해 읽기 허용

- REPEATEABLE_READ : 동일한 필드에 대해 다중 접근 시 모두 동일한 결과를 보장

Read-only 속성

- true인 경우 insert, update, delete 실행 시 예외 발생, 기본 설정은 false

Rollback-for-예외

- 특정 예외가 발생 시 강제로 Rollback

No-rollback-for-예외

- 특정 예외의 발생 시에는 Rollback 처리되지 않음 

위의 속성들은 모두 @Transactional을 설정할 때 속성으로 지정할 수 있다.

@Transactional 적용 순서

스프링은 간단한 트랜잭션 매니저의 설정과 @Transactional 어노테이션을 이용한 설정만으로 애플리케이션 내의 트랜잭션에 대한 설정을 처리할 수 있다.

@Transactional 어노테이션의 경우 위의 같이 메서드에 설정하는 것도 가능하지만, 클래스나 인터페이스에 선언하는 것 역시 가능하다.

어노테이션의 우선순위는 다음과 같다.

- 메서드의 설정이 가장 우선시 된다.

- 클래스의 설정은 메서드보다 우선순위가 낮다

- 인터페이스의 설정이 가장 낮은 우선순위이다.

위의 귝치대로 적용되는 것을 기준으로 작성하자면 인터페이스에는 가장 기준이 되는 @Transactional과 같은 설정을 지정하고,
클래스나 메서드에 필요한 어노테이션을 처리하는 것이 좋다.

댓글과 댓글 수에 대한 처리
실습할 예제는 단순히 댓글을 추가하면 tbl_reply테이블에 insert 하고, tbl_board 하고, tbl_board 테이블에는 댓글의 수를 의미하는 replyCnt라는 칼럼을 추가해서
해당 게시물 댓글의 수를 update를 한다. 
tbl_board 테이블에는 replyCnt 칼럼을 추가한다.(게시물의 수가 많은 경우는 시간이 오래걸린다.)
sql table tbl_board add(replycnt number default 0);

기존에 댓글이 존재했다면 replyCnt에 반영해 두어야 하므로 아래의 쿼리를 실행한다.
update tbl_board set replycnt = (select count(rno) from tbl_reply where tbl_reply.bno = tbl_board.bno);


프로젝트 수정
데이터베이스가 수정되었으므로, BoardVO 클래스와 MyBatis의 SQL, BoardService 등을 수정해 줄 필요가 있따.
이전 파트에서 작성했던 'ex03' 혹은 'jex03' 프로젝트를 수정하는 형태로 적용하도록 한다.

BoardVO, BoardMapper 수정
예제) org.zerock.domain.BoardVO 클래스에는 댓글의 숫자를 의미하는 인스턴스 변수를 하나 추가해야 하낟.

package org.zerock.domain;

import java.util.Date;

import lombok.Data;

@Data
public class BoardVO {

	private Long bno;
	private String title;
	private String content;
	private String writer;
	private Date regdate;
	private Date updateDate;
	private int replyCnt;
}

BoardMapper 인터페이스에는 새롭게 replyCnt를 업데이트하는 메서드를 추가해야 한다.
예제) BoardMapper 인터페이스 수정

package org.zerock.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.zerock.domain.BoardVO;
import org.zerock.domain.Criteria;

public interface BoardMapper {

	//@Select("select * from tbl_board where bno > 0")
	public List<BoardVO> getList();	
	
	// Criteria 추가 p.294
	public List<BoardVO> getListWithPaging(Criteria cri);
	
	// p.322 Mybatis에서 전체 데이터의 개수 처리
	public int getTotalCount(Criteria cri);
	
	public void insert(BoardVO board);
	
	public void insertSelectKey(BoardVO board);
	
	public BoardVO read(Long bno);
	
	public int delete(Long bno);
	
	public int update(BoardVO board);
	
	public void updateReplyCnt(@Param("bno") Long bno, @Param("amount")int amount);
}

새로 추가된 updateReplyCnt()는 해당 게시물의 번호인 bno와 증가나 감소를 의미하는 amount 변수에 파라미터를 받을 수 있도록 처리한다.
이것은 댓글이 등록되면 1이 증가하고, 댓글이 삭제되면 1이 감소하기 때문이다.
MyBatis의 SQL을 처리하기 위해서는 기본적으로 하나의 파라미터 타입을 사용하기 때문에 위와 같이 2개 이상의 데이터를 전달하려면 @Param이라는 어노테이션을 이용해서 처리할 수 있다.

댓글이 추가되면 반정규화된 tbl_board 테이블에 replycnt 칼럼이 업데이트되어야 하기 때문에 BoardMapper.xml에 updateReplyCnt 구문을 추가해야 한다

예제) BoardMapper.xml의 수정

<update id="updateReplyCnt">
	update tbl_board set replycnt = replycnt + #{amount} where bno = #{bno}
</update>

BoardMapper.xml의 게시물의 목록을 처리하는 부분에서는 새롭게 추가된 replycnt칼럼을 가져오도록 인라인뷰 내에 추가하고, 바깥쪽 select에도 추가한다.

예제) BoardMapper.xml id= getListWithPaging 수정

<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO">
	<![CDATA[
	SELECT
		bno, title, content, writer, regdate, updatedate, replycnt
	FROM
		(
		select /*+INDEX_DESC(tbl_board pk_board) */
		 	rownum rn, bno, title, content, writer, regdate, updatedate, replycnt
		from 
			tbl_board
		where  
		  
		  
	]]>

	<include refid="criteria"></include>
	<![CDATA[
		rownum <= #{pageNum} * #{amount}
		) 
		where rn > (#{pageNum} -1) * #{amount}
	]]>
</select>

ReplyServiceImpl의 트랜잭션 처리
ReplyServiceImpl 클래스는 기존의 ReplyMapper만을 이용했지만, 반정규화 처리가 되면서 BoardMapper를 같이 이용해야 하는 상황이 되었다.
ReplyServiceImpl에서 새로운 댓글이 추가되거나 삭제되는 상황이 되면 BoardMapper와 ReplyMapper를 같이 이용해서 처리하고, 
이 작업은 트랜잭션으로 처리되어야 한다.

예제) ReplyServiceImpl 클래스 수정 

package org.zerock.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.zerock.domain.Criteria;
import org.zerock.domain.ReplyPageDTO;
import org.zerock.domain.ReplyVO;
import org.zerock.mapper.BoardMapper;
import org.zerock.mapper.ReplyMapper;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

/*
 * 스프링 4.3을 이용하는 경우 ReplyServiceImpl
 * @Service
 * @Log4j
 * @AllArgsContructor
 * public class ReplyServiceImpl implements ReplyService{
 * 
 * 	private ReplyMapper mapper;
 * }
 * */

@Service
@Log4j
public class ReplyServiceImpl implements ReplyService {

	@Setter(onMethod_ = @Autowired)
	private ReplyMapper mapper;
	
	// reply이 등록되면 tbl_board에도 replyCnt 칼럼 업데이트가 되어야 해서
	// 트랜잭션으로 처리하기 위해 BoardMapper 의존성 주입
	@Setter(onMethod_ = @Autowired)
	private BoardMapper boardMapper;


기존과 달라지는 점은 기존에는 ReplyMapper만을 주입하기 때문에 스프링 4.3부터 지원하는 자동주입을 이용할 수 있었지만, 
추가적으로 BoardMapper를 이용하면서 자동 주입 대신 @Setter를 통한 주입이 이루어진다는 점이다.

예제) replyServiceImpl의 댓글 등록과 삭제를 담당하는 메서드는 @Transational의 처리

	@Transactional
	@Override
	public int register(ReplyVO vo) {
		
		log.info("register........ " + vo);
		
		boardMapper.updateReplyCnt(vo.getBno(),	1);
		
		return mapper.insert(vo);
	}
	@Transactional
	@Override
	public int remove(Long rno) {
		
		log.info("delete........ " + rno);
		
		ReplyVO vo = mapper.read(rno);
		
		boardMapper.updateReplyCnt(vo.getBno(), -1);
		
		return mapper.delete(rno);
		
	}


댓글 등록의 경우에는 파라미터로 전달받은 ReplyVO 내에 게시물의 번호가 존재하므로 이를 이용해서 댓글을 추가한다.
댓글의 삭제는 전달되는 파라미터가 댓글의 번호인 rno만을 받기 때문에 해당 댓글의 게시물을 알아내는 과정이 필요하다.
(파라미터로 게시물의 번호 bno를 받을 수 있다면 좋겠지만 그럴 경우에는 ReplyController까지 같이 수정될 필요가 있다.)

화면 수정 
BoardController나 ReplyController 자체는 크게 수정할 것이 없지만, 게시물의 목록 화면에서는 댓글의 숫자가 출력될 수 있도록 수정해 줄 필요가 있다.

예제) View 폴더 내 board/list.jsp 파일의 일부에 댓글의 숫자를 반영하다.
				      <c:forEach items="${list}" var="board">
		                      <tr>
		                      	<td><c:out value="${board.bno }"/></td>
		                      	<td>
		                      	<a class="move" href="<c:out value='${board.bno }'/>">
		                      	<c:out value="${board.title }"/> </a> <b> [ <c:out 
		                      	value="${board.replyCnt }"/> ] </b>
		                      	</td>
		                      	<td><c:out value="${board.writer }"/></td>
		                      	<td><fmt:formatDate pattern="yyyy-MM-dd" value="${board.regdate }"/></td>
		                      	<td><fmt:formatDate pattern="yyyy-MM-dd" value="${board.updateDate }"/></td>
   		                      </tr>		                      
		                      </c:forEach>		       